[{"title":"byte数组转String的编码问题","url":"https://iamting93.github.io/2020/12/11/java/byte数组转String的编码问题/","content":"<h1 id=\"byte数组转String的编码问题\"><a href=\"#byte数组转String的编码问题\" class=\"headerlink\" title=\"byte数组转String的编码问题\"></a>byte数组转String的编码问题</h1><p>最近项目遇到了一个诡异的问题，就是从服务器返回用gzip压缩过的json响应到客户端，但是会提示gzip压缩包已经损坏，经过研究后，把原因记录一下。</p>\n<p>首先贴上一段代码，若果知道结果以及原因，那么后面的内容就可以不用看了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] normalBin = &#123;<span class=\"number\">97</span>&#125;; <span class=\"comment\">// 小写'a'的ascii码</span></span><br><span class=\"line\">        String normalStr = <span class=\"keyword\">new</span> String(normalBin);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] normalBinFromStr = normalStr.getBytes();</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> Arrays.equals(normalBin, normalBinFromStr) : <span class=\"string\">\"First assertion error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bin = &#123;-<span class=\"number\">117</span>&#125;;</span><br><span class=\"line\">        String str = <span class=\"keyword\">new</span> String(bin);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] binFromStr = str.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> Arrays.equals(bin, binFromStr) : <span class=\"string\">\"Second assertion error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中我们主要关注的是两个断言结果会是什么，运行一下。（记得带上-ea参数，不然断言不起作用)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -ea -cp ./ com.demo.Main</span><br></pre></td></tr></table></figure>\n<p>结果如下</p>\n<p><img src=\"/img/project/btyeToString_01.PNG\" alt=\"图1\" title=\"图1\"></p>\n<p>第二个断言错误出错了。这是为什么呢，同样是把一个byte数组先转为string，然后再转为byte数组，但是第一个断言就没有问题，但是第二个断言就报错了。</p>\n<hr>\n<p>在探究原因之前，我们需要一点有关于编码的知识储备。</p>\n<p>说起编码，我们就能立马想起ascii码，UTF-8，GBK2312等等的编码规则，那它们之间是一个怎么样的关系呢？</p>\n<p>就拿ascii码和UTF-8来说，众所周知，ascii码是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，一共有128个字符，能表示52个字母（包括大写）以及0、1等数字，一些常用的符号（例如*、#、@等），还有控制字符或通信专用字符,如控制符：LF（换行）。对于表示英语等西欧语言来说，ascii码是已经足够了，但是对于表示其它语言，如汉语等，就显得力有不逮了，于是就有UTF-8等兼容ascii码的编码规则。</p>\n<p>UTF-8是一种可变长度字符编码，它可以用一至四个字节对Unicode字符集中的所有有效编码点进行编码（ Unicode是一种包含所有符号的编码）。参考<a href=\"https://blog.csdn.net/sandyen/article/details/1108168\" target=\"_blank\" rel=\"noopener\">UTF-8编码规则</a>这篇博客，我们了解了UTF-8的编码规则</p>\n<pre><code>对于某一个字符的UTF-8编码，如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的位数，其余各字节均以10开头。\n如表：\n1字节 0xxxxxxx\n2字节 110xxxxx 10xxxxxx\n3字节 1110xxxx 10xxxxxx 10xxxxxx\n4字节 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre><p>​    譬如，现在有一段字节流为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x69 0xE6 0x88 0x91 //解码结果为&quot;i我&quot;</span><br></pre></td></tr></table></figure>\n<p>UTF-8在解码的时候，读到了0x69(0110 1001)，发现这个字节是最高为0，所以判断这个字节是单字节，就直接解码为小写字母<code>i</code>(对应ascii码的69)，然后继续读后一字节0xE6(1110 0110)，发现这是一个三字节的字符，就会往后继续读两个字节0x88(1000 1000)和0x91(1001 0001)，并且解码为汉字<code>我</code>。至此，解码完毕。</p>\n<p>在对UTF-8编解码的工作过程有一个大概认识后，我们再来考虑一种情况，若果现在有如下的字节流，UTF-8会怎么处理?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x8B</span><br></pre></td></tr></table></figure>\n<p>UTF-8读到字节0x8B(1000 1011)，发现这个字节并不对应上述编码规则的任何一条，这时候UTF-8会判断这个字节为无效字节，并且会用<code>0xEF</code> <code>0xBF</code> <code>0xBD</code> 这三个字节来替换这个无效字节。所以，当查看字节流的时候发现有</p>\n<p><code>0xEF</code> <code>0xBF</code> <code>0xBD</code> 这三个代表无效字节的标记时，就得检查是不是UTF-8转换出了问题了。</p>\n<hr>\n<p>有了上面的知识储备后，就不难理解代码中为什么第二个断言会错误了，我们来看看它们的字节流是怎么样子的</p>\n<p><img src=\"/img/project/btyeToString_02.PNG\" alt=\"图2\" title=\"图1\"></p>\n<p>normalBin转换前后，字节流都是61，但是bin转为字符串再转回字节数组后，它的值很明显从0x8B(十进制为-117)变为<code>0xEF</code> <code>0xBF</code> <code>0xBD</code>，因为String的默认编码方式是UTF-8。</p>\n<hr>\n<p>那为什么会出现无效字节呢？其实这个就是我的项目中碰到的问题。</p>\n<p>项目需要使用gzip压缩文件，压缩过后会返回byte数组，但是经过网关的时候，因为某些原因，把这个byte数组强行转为String，导致一些字节丢失，从而导致压缩文件损坏。</p>\n<p>所以说，人家本来就是需要用byte数组才能正常工作，但是你却把人家变为String，那出错了就不意外了。类似的还有上传图片后损坏等等，也有可能是因为这个原因导致。</p>\n","categories":["java"],"tags":[]},{"title":"Spring Security Architecture","url":"https://iamting93.github.io/2020/03/19/java/Spring Security Architecture/","content":"<h1 id=\"Spring-Security-Architecture\"><a href=\"#Spring-Security-Architecture\" class=\"headerlink\" title=\"Spring Security Architecture\"></a>Spring Security Architecture</h1><h3 id=\"Authentication和Access-Control\"><a href=\"#Authentication和Access-Control\" class=\"headerlink\" title=\"Authentication和Access Control\"></a>Authentication和Access Control</h3><p>应用安全或多或少归结为两个独立的问题：认证（你是谁？）和授权（你能干啥？）。Spring Security就是针对这两个问题设计出来的框架，而且具有良好的拓展性。</p>\n<h5 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h5><p>认证的主要接口是<code>AuthenticationManager</code>，这个接口只有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthenticationManager</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> AuthenticationException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>AuthenticationManager</code>在<code>authenticate()</code>中做了以下3件事中的一件：</p>\n<ol>\n<li>如果输入的验证信息正确，那么返回一个<code>Authentication</code>对象（通常设置其属性<code>authenticated=true</code>）</li>\n<li>若果验证信息不正确，就直接抛出<code>AuthenticationException</code>异常</li>\n<li>若果不能判断信息正确与否就返回<code>null</code></li>\n</ol>\n<p><code>AuthenticationException</code>是一个运行时异常。它通常由应用默认的一个通用方法处理掉，这取决于应用的风格和目的。换句话说就是开发者一般不应该在代码里直接捕获和处理它，直接抛出。</p>\n<p>最常见的<code>AuthenticationManager</code>实现是<code>ProviderManager</code>，这个实现类利用一系列的<code>AuthenticationProvider</code>来进行认证。<code>AuthenticationProvider</code> 接口有点像<code>AuthenticationManager</code>，但是它有一个额外的方法可供调用，这个方法用来检查给定的认证方式是否支持：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> AuthenticationException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; authentication)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>supports()</code>中的<code>Class&lt;?&gt;</code>参数实际上是<code>Class&lt;? extends Authentication&gt;</code>。通过委托一系列的<code>AuthenticationProviders</code>，应用里的一个<code>ProviderManager</code>可以支持多种不同的认证方式。若果<code>ProviderManager</code>不能认证某个特殊的<code>Authentication</code>实例，那么它就会被跳过。</p>\n<p><code>ProviderManager</code>有一个可选的父类，若果子类的所有providers都返回<code>null</code>，那么就到父类中进行验证。若果没有父类，并且认证失败的话将会抛出<code>AuthenticationException</code>。</p>\n<p>有时候，一个应用会有关于某种资源的集合（譬如所有匹配<code>/api/**</code>URI的页面资源），每种集合都会有属于它自己的<code>AuthenticationManager</code>。有时候，这些集合的<code>AuthenticationManager</code>的实现类是一个<code>ProviderManager</code>，并且它们共享同一个父类。这个父类相当于一种“全局”资源，用作所有子类providers都认证失败时的一种替补验证方案。</p>\n<p><img src=\"https://github.com/spring-guides/top-spring-security-architecture/raw/master/images/authentication.png\" alt=\"ProviderManagers with a common parent\"></p>\n<h5 id=\"Customizing-Authentication-Managers\"><a href=\"#Customizing-Authentication-Managers\" class=\"headerlink\" title=\"Customizing Authentication Managers\"></a>Customizing Authentication Managers</h5><p>Spring Security提供一些配置helper来快速配置认证manager。最常见的helper就是<code>AuthenticationManagerBuilder</code>，适合用来创建in-memory，JDBC或者LDAP的<code>UserDetails</code>，或者是添加自定义的<code>UserDetailsService</code>。下面的例子展示了怎么配置一个全局的<code>AuthenticationManager</code>，即是上面提及的父类manager：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   ... <span class=\"comment\">// web stuff here</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(AuthenticationManagerBuilder builder, DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">    builder.jdbcAuthentication().dataSource(dataSource).withUser(<span class=\"string\">\"dave\"</span>)</span><br><span class=\"line\">      .password(<span class=\"string\">\"secret\"</span>).roles(<span class=\"string\">\"USER\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是以web应用作为例子，但是<code>AuthenticationManagerBuilder</code>的应用场景不止如此。注意，这里的<code>AuthenticationManagerBuilder</code>是被用<code>@Autowired</code>注入到<code>@Bean</code>的方法中，这样可以让builder创建一个全局的父类<code>AuthenticationManager</code>。相反，若果我们用以下方式创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">   ... <span class=\"comment\">// web stuff here</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">    builder.jdbcAuthentication().dataSource(dataSource).withUser(<span class=\"string\">\"dave\"</span>)</span><br><span class=\"line\">      .password(<span class=\"string\">\"secret\"</span>).roles(<span class=\"string\">\"USER\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(通过<code>@Override</code>父类的方法)那么<code>AuthenticationManagerBuilder</code>只会创建一个局部的<code>AuthenticationManager</code>，它是全局<code>AuthenticationManager</code>的一个子类。在Spring boot应用中可以<code>@Autowired</code>全局<code>AuthenticationManager</code>到其它bean中，但是不能够<code>@Autowird</code>一个局部的，除非把它暴露出来。</p>\n<p>Spring Boot提供一个默认的全局 <code>AuthenticationManager</code>  ,除非自定义一个全局的<code>AuthenticationManager</code>Bean来替换它。一般情况下，默认的全局<code>AuthenticationManager</code>足够安全，无须过于担心其安全性，除非自定义一个全局<code>AuthenticationManager</code>。</p>\n<h5 id=\"Authorization-or-Access-Control\"><a href=\"#Authorization-or-Access-Control\" class=\"headerlink\" title=\"Authorization or Access Control\"></a>Authorization or Access Control</h5><p>一旦认证成功，我们就能进行下一步：授权。授权的核心是<code>AccessDecisionManager</code>。框架提供了三种实现类，这三种实现类都是委托一系列的<code>AccessDecisionVoter</code>来确定是不是要授权，有点像<code>ProviderManager</code>委托<code>AuthenticationProviders</code>。</p>\n<p>一个<code>AccessDecisionVoter</code>需要一个<code>Authentication</code>（表示当前认证了的用户）和一个被<code>ConfigAttributes</code>描述的受保护对象来确定是否授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(ConfigAttribute attribute)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">vote</span><span class=\"params\">(Authentication authentication, S object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Collection&lt;ConfigAttribute&gt; attributes)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>Object</code>完全可以在<code>AccessDecisionManager</code>和<code>AccessDecisionVoter</code>之间进行传递。它代表一个用户想要访问的东西（最常见的是一个web资源或者一个Java类中的方法）。<code>ConfigAttributes</code>也可以在<code>AccessDecisionManager</code>和<code>AccessDecisionVoter</code>之间进行传递，它携带了一些信息，这些信息代表了这个受保护的<code>Object</code>的授权规则。<code>ConfigAttribute</code>是一个接口，但是它只有一个返回字符串的方法，这些字符串表示了受保护资源的授权规则，并且通常有特殊格式（譬如<code>ROLE_</code>前缀）或者是一个需要计算的表达式。</p>\n<p>大多开发者都只使用默认的<code>AccessDecisionManager</code>，具体实现类是<code>AffirmativeBased</code>（这个实现类的策略是只要有一个voter通过，就会被授权）。自定义是否授权，要么就是在voter里新增授权规则，要么就是修改原有的授权规则。</p>\n<p>使用Spring Expression Language(SpEL)表达式来确定是否授权很常见，如<code>isFullyAuthenticated() &amp;&amp; hasRole(&#39;FOO&#39;)</code>。若果需要自定义SpEL表达式，那么需要实现<code>SecurityExpressionRoot</code>  或者 <code>SecurityExpressionHandler</code>。</p>\n<hr>\n<h3 id=\"Web-Security\"><a href=\"#Web-Security\" class=\"headerlink\" title=\"Web Security\"></a>Web Security</h3><p>Spring Security 是基于Servlet的<code>Filters</code>，所以先看看<code>Filters</code>会很大有裨益。下图是一次HTTP请求从发起到被处理过程中所经过的handlers的层级图。</p>\n<p><img src=\"https://github.com/spring-guides/top-spring-security-architecture/raw/master/images/filters.png\" alt=\"Filter chain delegating to a Servlet\"></p>\n<p>客户端发送一个请求到APP，然后container基于请求的URI路径决定哪个过滤器和哪个servlet会处理这次请求。一次请求最多能被一个servlet处理，但是过滤器则是组成一条有序链，请求可以在链中被顺序地处理，并且一个过滤器可以拦截请求，不让后续的过滤器处理。一个过滤器也可以修改传递给下游过滤器和servlet的请求和（或者）响应。过滤器链的顺序非常重要，而且Spring Boot通过2个机制来管理链的顺序：一个是有<code>@Order</code>注解或者实现了<code>Ordered</code>接口的<code>Filter</code>类<code>@Bean</code>，另外一种是把过滤器修饰成<code>FilterRegistrationBean</code>，这个<code>FilterRegistrationBean</code>有一个<code>order</code>的成员变量决定调用的顺序。一些现成的过滤器定义了它们自己的值来表明它们想要相对于彼此的顺序位置（例如来自Spring Session的<code>SessionRepositoryFilter</code>有一个值为<code>Integer.MIN_VALUE + 50</code>的<code>DEFAULT_ORDER</code>，这说明它想在链中早点被处理，同时不妨碍比它靠前的过滤器被处理)。</p>\n<p>Spring Security本质上就是这条链中的一个<code>Filter</code>，具体类型是<code>FilterChainProxy</code>，</p>\n<p>下文将会提及这个类。在一个Spring Boot app中，这个Spring Security的过滤器是<code>ApplicationContext</code>中的一个<code>@Bean</code>，而且默认是被添加到链中，所以它可以处理每一次请求。它在链中的位置由<code>SecurityProperties.DEFAULT_FILTER_ORDER</code>定义，该位置由<code>FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER</code>锚定。不仅如此，从container的角度看，Spring Security就只是一个过滤器，但是从Spring Security角度看，它自身内部包含了很多额外的过滤器，每一个都有特定的作用。如下图:</p>\n<p>实际上，Spring Security的过滤器中甚至还有一层间接层：这个间接层在container中是以<code>DelegatingFilterProxy</code>形式存在，并且不是一个Spring <code>@Bean</code>。这个<code>DelegatingFilterProxy</code>在容器中代表着<code>FilterChainProxy</code>，这个<code>FilterChainProxy</code>有着一个固定的名字<code>springSecurityFilterChain</code>。</p>\n<p><code>FilterChainProxy</code>包含了所有的安全逻辑，并且在内部通过过滤器链来实现。链中的过滤器都有相同的API接口（从Servlet角度看它们都实现了<code>Filter</code>接口），并且可以拦截请求，不让后续的过滤器处理。</p>\n<p>在Spring Security中，顶层的<code>FilterChainProxy</code>管理着多条的过滤器链，而且container不知道这些链的存在。Spring Security filter包含了一个过滤器链的列表，并且把请求分派给第一个匹配的过滤器链。下图展示了基于请求路径的分派例子（/foo/<em> </em>会比 /**先匹配)。这是最常见的但不是唯一的匹配方式。最重要的一点就是只有一条过滤器链处理一个请求。</p>\n<p><img src=\"https://github.com/spring-guides/top-spring-security-architecture/raw/master/images/security-filters-dispatch.png\" alt=\"Security Filter Dispatch\"></p>\n<p>没有自定义安全配置的Spring Boot应用有n条过滤器链，一般n=6。第n - 1条链会忽略静态资源匹配，如<code>/css/**</code>和<code>/images/**</code>，以及错误页面<code>/error</code>（用户能通过配置<code>SecurityProperties</code>的<code>security.ignored</code>来配置这些路径）。最后一条过滤器链匹配全路径<code>/**</code>，而且更加灵活，这条链包含了认证，授权，异常处理，会话处理，头写入等等的逻辑。这条链默认一共有11个过滤器，但是用户一般不需要关心用到了哪些过滤器，以及什么时候用到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spring Security内所有的过滤器对于container来说都是未知的，这一点很重要，特别是在一个Spring Boot应用中，所有的`Filter`类型的`@Beans`都是自动被container注册。所以若果想在安全链中添加一个自定义的过滤器，就要不声明为`@Bean`，或者封装到`FilterRegistrationBean`中并且显式禁止container注册。</span><br></pre></td></tr></table></figure>\n<h5 id=\"Creating-and-Customizing-Filter-Chains\"><a href=\"#Creating-and-Customizing-Filter-Chains\" class=\"headerlink\" title=\"Creating and Customizing Filter Chains\"></a>Creating and Customizing Filter Chains</h5><p>在Spring Boot app中，默认备用的过滤器链（即匹配<code>/**</code>请求的链）有一个<code>SecurityProperties.BASIC_AUTH_ORDER</code>的预定义顺序。通过设置<code>security.basic.enabled=false</code>，或者设置一个lower的顺序就可以关掉这个预定义顺序。要这样做，只需添加一个<code>WebSecurityConfigurerAdapter</code>（或者<code>WebSecurityConfigurer</code>）的<code>@Bean</code>并且用<code>@Order</code>修饰这个类。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Order</span>(SecurityProperties.BASIC_AUTH_ORDER - <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationConfigurerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    http.antMatcher(<span class=\"string\">\"/foo/**\"</span>)</span><br><span class=\"line\">     ...;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个bean会导致Spring Security增加一条新的过滤器链并且放在备用链前。</p>\n<p>许多应用对于不同的资源，都有不同的访问规则。每一个资源都有它自己的<code>WebSecurityConfigurerAdapter</code>，这个adapter有唯一的顺序，并且有自己的请求matcher。若果匹配规则有重叠，顺序靠前的过滤器将优先。</p>\n<h3 id=\"Request-Matching-for-Dispatch-and-Authorization\"><a href=\"#Request-Matching-for-Dispatch-and-Authorization\" class=\"headerlink\" title=\"Request Matching for Dispatch and Authorization\"></a>Request Matching for Dispatch and Authorization</h3><p>一条安全的过滤器链（等价于一个<code>WebSecurityCOnfigurerAdapter</code>）有一个用于请求的匹配器，这个匹配器决定这条过滤器链应用到这个HTTP请求。一旦一条过滤器链被应用，其它的就不会被应用了。但是在过滤器链中你能够通过在<code>HttpSecurity</code>中配置额外的匹配器来进行更细粒度的控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Order</span>(SecurityProperties.BASIC_AUTH_ORDER - <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationConfigurerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    http.antMatcher(<span class=\"string\">\"/foo/**\"</span>)</span><br><span class=\"line\">      .authorizeRequests()</span><br><span class=\"line\">        .antMatchers(<span class=\"string\">\"/foo/bar\"</span>).hasRole(<span class=\"string\">\"BAR\"</span>)</span><br><span class=\"line\">        .antMatchers(<span class=\"string\">\"/foo/spam\"</span>).hasRole(<span class=\"string\">\"SPAM\"</span>)</span><br><span class=\"line\">        .anyRequest().isAuthenticated();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最常见的错误是忘记这些匹配器是应用于不同的处理过程，一个是匹配整个过滤器链（antMatcher(“/foo/**”)），另外一个只是设置访问规则（antMatchers(“/foo/bar”).hasRole(“BAR”)）。</p>\n<h5 id=\"Combining-Application-Security-Rules-with-Actuator-Rules\"><a href=\"#Combining-Application-Security-Rules-with-Actuator-Rules\" class=\"headerlink\" title=\"Combining Application Security Rules with Actuator Rules\"></a>Combining Application Security Rules with Actuator Rules</h5><p>若果使用Spring Boot Actuator来管理端点，那就希望这些端点都是安全的，并且默认就是如此。事实上只要添加Actuator到一个安全应用，就会得到一条额外的只应用到actuator端点的过滤器链。它定义了一个只匹配actuator端点的请求匹配器，并且有着一个值为5的<code>ManagementServerProperties.BASIC_AUTH_ORDER</code>，这个顺序要小于<code>SecurityProperties</code>的备用链，所以会在备用链前被调用。</p>\n<p>若果需要应用安全规则到这些actuator端点，可以添加一个顺序要比默认actuator端点的链更早的，匹配所有端点的过滤器链。若果想用默认的配置，那么最简单的方式是添加一个顺序比默认actuator后，但比备用早（如<code>ManagementServerProperties.BASIC_AUTH_ORDER + 1</code>的过滤器，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Order</span>(ManagementServerProperties.BASIC_AUTH_ORDER + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationConfigurerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    http.antMatcher(<span class=\"string\">\"/foo/**\"</span>)</span><br><span class=\"line\">     ...;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Method-Security\"><a href=\"#Method-Security\" class=\"headerlink\" title=\"Method Security\"></a>Method Security</h3><p>正如支持安全web应用那样，Spring Security也为安全访问Java方法提供支持。对于Spring Security来说这不过是一种不同“保护资源“。对于用户来说，这意味着访问规则使用相同格式的<code>ConfigAttribute</code>字符串（如角色或者表达式），但是编写代码的位置就不一样了。第一步是启动method security，例如在应用的顶层配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity</span>(securedEnabled = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleSecureApplication</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后就能直接装饰方法资源，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Secured</span>(<span class=\"string\">\"ROLE_USER\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">secure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Security\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个一个有着安全方法的service。若果Spring创建一个这样类型的<code>@Bean</code>，那么它会被代理，并且调用者将会被安全拦截器进行权限验证，通过后方法才能执行。若果验证失败，那么调用者将会得到<code>AccessDeniedException</code>而不是方法的执行结果。</p>\n<p>还有其它用于方法的，可以增强安全性的注解，譬如<code>@PreAuthorize</code>和<code>@PostAuthorize</code>，分别能让你写一些关于方法参数和返回结果的表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组合Web安全和方法安全的例子并不少见。过滤器链为用户提供常见的功能，如认证和重定向到登录页面等等，而方法安全提供更具颗粒度的保护。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Working-with-Threads\"><a href=\"#Working-with-Threads\" class=\"headerlink\" title=\"Working with Threads\"></a>Working with Threads</h3><p>Spring Security从根本上来说是线程绑定的，因为它需要确保当前的认证用户信息可以被下游的消费者获取。基本构件是<code>SecurityContext</code>，它可能包含了一个<code>Authenticaiton</code>（当一个用户登录后<code>Authentication</code>将会被明确地标记为<code>authenticated</code>）。通过<code>SecurityContextHolder</code>静态方法，你可以总是访问和操作<code>SecurityContext</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityContext context = SecurityContextHolder.getContext();</span><br><span class=\"line\">Authentication authentication = context.getAuthentication();</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(authentication.isAuthenticated);</span><br></pre></td></tr></table></figure>\n<p>在user应用代码中这样做不常见，但是要自定义认证过滤器的话，这会很有用（尽管Spring Security中有基类可以实现相同功能，避免使用<code>SecurityContextHolder</code>)。</p>\n<p>若果在一个web端点中访问当前认证用户，可以在<code>@RequestMapping</code>中传入参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/foo\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(@AuthenticationPrincipal User user)</span> </span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">// do stuff with user</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个注解从<code>SecurityCOntext</code>中拉取当前<code>Authentication</code>，并且调用<code>getPrincipal()</code>方法得到参数。<code>Authentication</code>中的<code>Principal</code>的类型依赖于进行认证<code>AuthenticationManager</code>，因此这是一个获取安全用户数据引用的小技巧。</p>\n<p>若果使用Spring Security，那么来自<code>HttpServletRequest</code>的<code>Principal</code>会是<code>Authentication</code>类型，那么可以直接这样定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/foo\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(Principal principal)</span> </span>&#123;</span><br><span class=\"line\">  Authentication authentication = (Authentication) principal;</span><br><span class=\"line\">  User = (User) authentication.getPrincipal();</span><br><span class=\"line\">  ... <span class=\"comment\">// do stuff with user</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候需要代码在没用Spring Security情况下正常工作，这些样就会很有用（你将需要更加安全地加载<code>Authentication</code>类）。</p>\n<h5 id=\"Processing-Secure-Methods-Asynchronously\"><a href=\"#Processing-Secure-Methods-Asynchronously\" class=\"headerlink\" title=\"Processing Secure Methods Asynchronously\"></a>Processing Secure Methods Asynchronously</h5><p>因为<code>SecurityContext</code>是线程绑定的，若果想在后台处理中调用安全方法，如带有<code>@Async</code>，那么需要确保上下文被传递。这可以归结为用后台任务（<code>Runnable</code>，<code>Callable</code>等）封装<code>SecurityContext</code>。Spring Security提供一些helpers来简化这个操作，例如使用<code>Runnable</code>和<code>Callable</code>的wrapper。为了传递<code>SecurityContext</code>到<code>@Async</code>方法，需要提供一个<code>AsyncConfigurer</code>并且确保<code>Executor</code>是正确类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncConfigurerSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">getAsyncExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DelegatingSecurityContextExecutorService(Executors.newFixedThreadPool(<span class=\"number\">5</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["java"],"tags":[]},{"title":"Eyes on me","url":"https://iamting93.github.io/2020/03/19/essay/Eyes on me/","content":"<p>那是一个动乱的时代，自战争爆发以来已是十几个岁月，各国都已厌倦无休止的战争，人们也祈求着和平，或许不久和平的曙光就会降临吧。<br>在一个边境的小镇，战争洗礼过的痕迹处处可见，但是却没有造成严重的损坏，虽然战争的炮火离这并不太遥远，但也没有往前推进的意思，人们也因能过上短暂的宁静生活而心存感激。<br>镇上有一家小小的酒吧，虽然经过修补，但还是可以看出那外墙上斑驳的弹坑，窗上残缺的玻璃裂缝满布，摇曳的招牌吱呀作响，仿佛诉说着那个枪林弹雨的时刻。店内的战争痕迹显得少很多，设施看上去老旧，但是却很整洁。与周围人去楼空的死寂相比，这家酒吧还保持着和平时的活力，就像战争不曾来过，只是顾客除了普通的市民，还有各式各样的雇佣兵，有时候甚至看到违背军纪偷偷跑出来的士兵。<br>对于在战场上饱受血雨腥风，朝不保夕的人来说，这里是让他们不再提心吊胆地享受着生活美好宁静的港湾，没有能比得上举杯痛饮，然后倒头呼呼大睡更有意义的事情了，那是才是活着的证明。明天的事，谁知道呢，现在能做的，就是在这个宁静的片刻贪婪而又努力地活着。<br>“M小姐，能为今天全员平安归来的我们唱上一段吗？”嘈杂中忽然冒出了一个提议，空气霎时凝固了一下，然后爆发更热烈的赞同声音。<br>“对对对，唱上一段吧，M小姐的歌声无与伦比”<br>“没有什么比在M小姐的歌声中喝上一杯更幸福的事情了”<br>人们纷纷把目光投向了一个捧着啤酒杯，刚从厨房出来的服务员，一个穿着有点老旧，但是绝不肮脏的女子，脸庞上有着淡淡的雀斑痕迹，及腰的褐色长发被梳成麻花。年轻，充满活力，在一群饱受战争和岁月洗涮而显得老成的人群中格格不入，她便是M小姐了。<br>“啊？K先生，很高兴能看见你们能平安归来，没有比这更好的事了。唱歌，当然可以啊，不过请先让我把啤酒送完呢。”M小姐微笑地回答道。<br>很快，M小姐便把啤酒送完。她脱掉了沾着淡淡酒印的围裙，站在酒吧小小的舞台上。嘈杂的人群瞬间安静下来，他们纷纷看向M小姐，在这里，M小姐可以看到所有人的脸孔。<br>“那么，接下来，就让我为大家唱一首耳熟能详的《露卡西亚》，庆祝K先生他们的平安归来吧。”<br>“好，没有什么歌比这首更适合了”<br>人们点头赞同，尔后归于沉寂，期待着歌声洗刷他们的心灵。<br>“感谢诸神，为我的勇士赐予祝福…”<br>就这样，台下的听众们都忘我地沐浴在这空灵而又有感染力的歌声中，本应凑到嘴边啤酒因动作的突然停止而倾撒到衣服上，刚点着的香烟在像石化了的手上一点一点完成了它的使命，但是人们都对此毫无理会。一动不动的，保持着原有的姿势，呼吸在这时候仿佛也是多余的。天籁，恐怕没有更适合的词来形容这歌声了。<br>就在所有人都浸润在充满磁性的歌声中时，没有人留意到，M小姐偷偷瞄了一眼角落后，脸庞上瞬间的失落。<br>“他没有来呢”<br>M小姐心里喃喃道。</p>\n<p>M小姐从小就喜欢唱歌，而且歌声极具特色，人们都形容她的嗓子是被神亲吻过的。她自小的梦想就是要当一个歌手，到全国各地去演唱。然而，战争的爆发，改变了一切，为了躲避战争，她不得不过跟着家人过着流浪的生活，直到某次战争，她和家人失散了，之后她就流落到了这个小镇，并且酒吧上找到了谋生的职业，那已经是好几年前的事了。<br>虽然生活不如意，但是M小姐从未放弃过歌唱，她很享受站在小舞台上的时光，也很享受台下听众那满足的表情。在兵荒马乱的时代，只有歌唱的此刻是和平。能为大家唤起和平的记忆，忘却战争的痛苦，或许这就是神给予这副歌喉的目的吧。M小姐坚信着，因此当有人请求M小姐歌唱的时候，都会微笑着答应了。台上的歌声依旧，只是台下的听众换了一批又一批。</p>\n<p>一天的晚上，M小姐又一次站在台上。当人们都沉迷于歌声中时，M小姐的目光却不经意地被角落里的一个陌生的脸孔吸引了。那个人的衣服有些破旧，而且能看出尘土的痕迹，头发也略带灰尘，与洁净的年轻面庞形成对比，微笑着的脸上的小伤疤是过往受伤的证明。虽然整个人看上去仿佛很疲倦，但是眼神却反驳着这样的结论，富有着朝气活力，这给M小姐很深刻的印象，大多数人们的眼神早已经因为战争而显得麻木浑浊。<br>或许也留意到M小姐的目光，那个陌生的男人仿佛像做错事一般，把头别过去另一边。M小姐心里不禁莞尔一笑，这个在战争边缘游走，见惯生死离别的男子，居然也有表现害羞的时候，但是脸上洋溢着的微笑，看得出很享受这样时刻。当歌唱结束后，陌生男子便匆匆地离开了。第二天，男子又出现在同样位置，静静地，微笑着，注视着，聆听着，然后又匆匆离去。<br>“这个男子会是谁呢？”M小姐心里想，问了一下雇佣兵们，他们都说他是最近新来的雇佣兵，一个叫做G的人，但是其他的信息，就不太清楚了。每次他都是孤身一人，匆匆来，然后匆匆离去，仿佛多一秒的停留都是不必要。只是每次目光投向他的时候，他都显得有点无所适从，而眼神依旧朝气活力。或许是好奇驱动着，M小姐每次登台都会不禁看一眼那个不起眼的角落，那个男子是否会害羞地别过头呢。</p>\n<p>时间就这样慢慢过去了一段，陌生男子来的次数也越来少，有时候从隔天，到三天，再到一星期，但是还没有人知道他的具体事情，他总是孤身来往。直到一天，当M小姐歌唱完后，男子并没有马上离去，而是停留在酒吧，神情挣扎着。最后，仿佛像立定决心一样，向M小姐走去。<br>“唱得不错呢”<br>“谢谢你的赞赏”M小姐有点意外地回答道，她没想到这个男子会向自己搭讪。<br>“你有考虑过等战争结束后去当一名歌手么？”<br>“是的，这是我的愿望，但是我不会写歌词，所以至今为止唱的都是老，不过我现在有想法了，若果可以，下次你来的话，我就表演这个”<br>“我很期待。对了，我叫G，很高兴认识你”<br>“我叫M，也很高兴认识你”<br>“嗯，我现在得离开了，不过我期待着那一天的到来，再见了”<br>“G先生”<br>“嗯？”<br>“请平安归来”<br>“我会的，再见”<br>“再见”</p>\n<p>自从一别后，G就再也没有出现过，M的心中越发不安。G此刻会是在哪里呢？<br>直到一晚，店内来了个陌生男子。<br>“请问你是M小姐？”<br>“是的，我是”M怀着不安地回答道。<br>“这里有一封信是交给你的”，陌生男子说罢，向M递过一份带着血迹的信件。<br>“这是G生前让我交到你手上的”<br>“什么！”M忽然觉得天旋地转<br>“我要做的事情已经完成，再见”</p>\n<p>告别陌生男子后，M小姐小心翼翼的拆开了信件:</p>\n<p>M小姐，你好：</p>\n<p>我被派往执行最后的任务，若果任务成功的话，那么战争也很快就结束了。若果你看到这信件，那就说明了我不能赴约了，对此，我深感抱歉。<br>那一晚，我很庆幸自己能和你对上话，对于我来说，这或许是最后一次来听你的歌唱了，所以我觉得自己得把握好这样的机会，不能让自己后悔。<br>我本来是一个早已麻木的人，对生活早已不抱有什么期待，因为对于明天自己能否活着，我也心存疑问。直到去到小镇的第一天晚上，我听到了你的歌声，让我听到了自己对于渴望活着的心声。本来已经麻木的心，忽然苏醒一般。<br>但是M小姐，我内心还有一个问题，让我狂躁不已。<br>M小姐，你觉得爱是什么？<br>有些人觉得爱就是性，是婚姻，是清晨六点的吻和一堆孩子，或许爱就是这样，M小姐，但你知道我怎么想吗？我觉得爱是想要触碰却又收回手。<br>但是若果有明天，我想我会毫不犹豫伸出触碰的手。</p>\n<p>再次抱歉，我不能听到你的新写的歌。</p>\n<p>阅毕，M小姐按照信原来的样子折叠好，然后放回到带着血迹的信封里。<br>“真傻”，M小姐心里不免喃喃道。</p>\n<p>时间流逝，不久，战争终于在人们的厌倦中落下帷幕。<br>“M小姐，唱一首《露卡西亚》吧，庆祝战争终于结束，庆祝我们还活着在这里”，胜利后的那天晚上，人们疯狂庆祝，期间有人这样提议道。<br>“好的，不过相比《露卡西亚》，我有一首更愿意分享的歌，这首歌的名字叫做《eyes on me》，希望大家喜欢吧”</p>\n<p>Whenever sang my songs<br>on the stage, on my own<br>…</p>\n<p>唱毕，M小姐鞠躬后便匆匆回到厨房了，留下一群久久还没有反应过来的人们。接着酒吧便爆发巨大的鼓掌声，赞许声，久久不已。<br>当人们想请M小姐出来再演唱一次的时候，却发现，M小姐早已不在了。<br>这就是M小姐最后一次出现在这个小酒吧，她到底去哪了？有人说在遥远的国度见到过她，也有人说她因为意外而离世了，众说不一。<br>但是她留下的这首歌，渐渐传唱开来，这是她曾在这里存在过的证明。</p>\n","categories":[],"tags":["随笔"]},{"title":"pika TCP连接断开","url":"https://iamting93.github.io/2019/09/22/python/pika TCP连接断开/","content":"<p>趁着工作任务开发学习了一波<a href=\"http://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html\" target=\"_blank\" rel=\"noopener\">AMQP协议</a>，以及其实现rabbitMQ，其实概念不难，也容易懂</p>\n<p>rabbitMQ官方文档传送门：<a href=\"https://www.rabbitmq.com/getstarted.html\" target=\"_blank\" rel=\"noopener\">点这里</a>（P.S. 官方文档真的写得通俗易懂，没用什么深奥词汇，英语渣的福音） </p>\n<p>这里使用的是python下的pika来进行学习，按照教程走一遍基本上就知道怎么使用了。</p>\n<p>本博文主要是关心一个情况，就是对于处理一些耗时的任务，TCP连接会断开的问题。</p>\n<p>正常情况下，rabbitMQ会有一套检测TCP连接情况的机制，就是发送<a href=\"https://www.rabbitmq.com/heartbeats.html\" target=\"_blank\" rel=\"noopener\">心跳包</a>了。</p>\n<p>客户端和服务器会决定一个叫做<code>heartbeat timeout</code>的值，具体就是双方同时提出一个非零值，谁小就用谁；若果有一个是0，就用非零的，rabbitmq默认的值是<code>60</code>。若果超过了这个时间值都没有收到心跳包，就会认为这个TCP连接不可达的了。经过抓包分析，这个发送行为是<code>双向</code>进行的。</p>\n<p>这里还有一个概念就是<code>heartbeat interval</code>，就是心跳包的发送周期，为<code>heartbeat timeout / 2</code>。若果错过2个心跳包，就会认为TCP连接不可达，刚好对应<code>heartbeat timeout</code>。</p>\n<p>好了，有了这些概念后，我们就可以开始今天的主题了：处理一些耗时的任务，TCP连接会断开。</p>\n<p>首先贴出代码。</p>\n<p>生产者代码:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'localhost'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.queue_declare(queue=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                          routing_key=<span class=\"string\">'test'</span>,</span><br><span class=\"line\">                          body=<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'message sent'</span>)</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<p>代码很简单，声明了一个<code>test</code>队列，然后发送了一个消息。注意一点，若果没有对队列进行绑定，就会自动绑定到默认交换机。</p>\n<p>消费者代码。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">done = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">f'I received the message'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'the message: <span class=\"subst\">&#123;body&#125;</span>'</span>)</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'localhost'</span>, heartbeat=<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.queue_declare(queue=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    channel.basic_consume(queue=<span class=\"string\">'test'</span>, on_message_callback=callback)</span><br><span class=\"line\">    channel.start_consuming()</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<p>代码也很简单，就是声明了队列，然后绑定消息处理回调函数，就开始监听了。注意代码中的<code>heartbeat=3</code>，这里是定义的是<code>heartbeat timeout</code>的值，所以<code>heartbeat interval</code>就是<code>1.5</code></p>\n<p>运行一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生产者</span><br><span class=\"line\">message sent</span><br><span class=\"line\"></span><br><span class=\"line\"># 消费者</span><br><span class=\"line\">I received the message</span><br><span class=\"line\">the message: b&apos;hello world&apos;</span><br></pre></td></tr></table></figure></p>\n<p>基础代码就是这样，但是我们得关注一下在没有消息的时候启动消费者，心跳包机制是怎么样的。<br>利用wireshark抓包如下</p>\n<p><img src=\"/img/python/TCP_1.png\" alt=\"图1\" title=\"图1\"></p>\n<pre><code>No.39 客户端发送心跳包\nNo.40 服务端发送ACK包\nNo.41 服务端发送心跳包\nNo.42 客户端发送ACK包\n往下重复...\n</code></pre><p>现在我们对代码修改一下，模拟处理耗时任务，修改如下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">done = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">f'I received the message'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'the message: <span class=\"subst\">&#123;body&#125;</span>'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">f'now I will sleep 10 seconds'</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,  heartbeat=<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.queue_declare(queue=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    channel.basic_consume(queue=<span class=\"string\">'test'</span>, on_message_callback=callback)</span><br><span class=\"line\">    channel.start_consuming()</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<p>在回调函数里面添加了睡眠10s的代码，运行一下，会报一下错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I received the message</span><br><span class=\"line\">the message: b&apos;hello world&apos;</span><br><span class=\"line\">now I will sleep 10 seconds</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;F:/py_workplace/process/receiver.py&quot;, line 21, in &lt;module&gt;</span><br><span class=\"line\">    channel.start_consuming()</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">pika.exceptions.StreamLostError: Stream connection lost: ConnectionResetError(10054, &apos;远程主机强迫关闭了一个现有的连接。&apos;, None, 10054, None)</span><br></pre></td></tr></table></figure>\n<p>程序报了<code>pika.exceptions.StreamLostError</code>错误，这是为什么呢？</p>\n<p>这是因为程序设置了心跳超时是3s，但是回调中却要睡眠10s，这时候TCP连接就断开了。</p>\n<p>wireshark的抓包如下。</p>\n<p><img src=\"/img/python/TCP_2.png\" alt=\"图2\" title=\"图2\"></p>\n<pre><code>No.37 服务器发送了一个消息到客户端\nNo.38 客户端发送ACK包\nNo.39 服务端发送心跳包\nNo.40 客户端发送ACK包\nNo.41 服务端发送心跳包\nNo.42 客户端发送ACK包\n...\nNo.49 服务器发送了RST包\n</code></pre><p>对比上面正常空闲时候的抓包，可以看出，这里面缺少了客户端发送的心跳包，因为这个时候客户端正在睡眠，线程被挂起了。所以后面服务器多次没有收到来自客户端的心跳包，就认为连接不可达，断开了连接。当客户端睡眠结束，发送ACK确认的时候，因为连接断开而报错。(这里有个问题，从抓包时间看，貌似断开连接不是在心跳超时的那个时间点，实际是往后了，这里我也想不懂，希望有大神能告知一下)。</p>\n<p>这里要怎么解决？</p>\n<ol>\n<li><p>延长心跳超时的时间，不过这个在任务耗时未知的时候就只能靠经验设置了。</p>\n</li>\n<li><p>关闭心跳检测，<a href=\"https://www.rabbitmq.com/heartbeats.html#disabling\" target=\"_blank\" rel=\"noopener\">方法</a>是在客户端和服务端把<code>heartbeat interval</code>设为0。但是有一个问题就是TCP会永久连接，有可能导致系统资源的耗尽。</p>\n</li>\n<li><p>增加一个心跳线程，专门用来处理心跳问题，这个方法没有验证过,貌似会有线程安全的问题。参考<a href=\"https://stackoverflow.com/questions/14572020/handling-long-running-tasks-in-pika-rabbitmq\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</li>\n</ol>\n<hr>\n<p>这里补充一下关于<code>channel.start_consuning()</code> 和<code>connention.process_data_events()</code>的差别。</p>\n<p>首先，先了解一下<code>connention.process_data_events()</code></p>\n<p><a href=\"https://pika.readthedocs.io/en/stable/modules/adapters/blocking.html\" target=\"_blank\" rel=\"noopener\">官方</a>解释是</p>\n<pre><code>Will make sure that data events are processed. Dispatches timer and channel callbacks if not called from the scope of \nBlockingConnection or BlockingChannel callback. Your app can block on this method.\n</code></pre><p>就是用来专门处理消息事件的，有一个参数<code>time_limit</code>,指定等待消息的时间，单位为秒。当为<code>None</code>的时候，就会一直等待，也就是说，会阻塞线程。</p>\n<p>这个函数会处理服务器发过来的心跳包，而且也会向服务器发送心跳包。</p>\n<p>然后到<code>channel.start_consuning()</code>，在源码里面有这样的调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_consuming</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Processes I/O events and dispatches timers and `basic_consume`</span></span><br><span class=\"line\"><span class=\"string\">    callbacks until all consumers are cancelled.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    NOTE: this blocking function may not be called from the scope of a</span></span><br><span class=\"line\"><span class=\"string\">    pika callback, because dispatching `basic_consume` callbacks from this</span></span><br><span class=\"line\"><span class=\"string\">    context would constitute recursion.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :raises pika.exceptions.ReentrancyError: if called from the scope of a</span></span><br><span class=\"line\"><span class=\"string\">        `BlockingConnection` or `BlockingChannel` callback</span></span><br><span class=\"line\"><span class=\"string\">    :raises ChannelClosed: when this channel is closed by broker.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># Check if called from the scope of an event dispatch callback</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> self.connection._acquire_event_dispatch() <span class=\"keyword\">as</span> dispatch_allowed:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> dispatch_allowed:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> exceptions.ReentrancyError(</span><br><span class=\"line\">                <span class=\"string\">'start_consuming may not be called from the scope of '</span></span><br><span class=\"line\">                <span class=\"string\">'another BlockingConnection or BlockingChannel callback'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    self._impl._raise_if_not_open()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Process events as long as consumers exist on this channel</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> self._consumer_infos:</span><br><span class=\"line\">        <span class=\"comment\"># This will raise ChannelClosed if channel is closed by broker</span></span><br><span class=\"line\">        self._process_data_events(time_limit=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>最后有一个<code>while</code>循环，就是执行<code>self._process_data_events(time_limit=None)</code>，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_process_data_events</span><span class=\"params\">(self, time_limit)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Wrapper for `BlockingConnection.process_data_events()` with common</span></span><br><span class=\"line\"><span class=\"string\">    channel-specific logic that raises ChannelClosed if broker closed this</span></span><br><span class=\"line\"><span class=\"string\">    channel.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    NOTE: We need to raise an exception in the context of user's call into</span></span><br><span class=\"line\"><span class=\"string\">    our API to protect the integrity of the underlying implementation.</span></span><br><span class=\"line\"><span class=\"string\">    BlockingConnection's underlying asynchronous connection adapter</span></span><br><span class=\"line\"><span class=\"string\">    (SelectConnection) uses callbacks to communicate with us. If</span></span><br><span class=\"line\"><span class=\"string\">    BlockingConnection leaks exceptions back into the I/O loop or the</span></span><br><span class=\"line\"><span class=\"string\">    asynchronous connection adapter, we interrupt their normal workflow and</span></span><br><span class=\"line\"><span class=\"string\">    introduce a high likelihood of state inconsistency.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    See `BlockingConnection.process_data_events()` for documentation of args</span></span><br><span class=\"line\"><span class=\"string\">    and behavior.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param float time_limit:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    self.connection.process_data_events(time_limit=time_limit)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.is_closed <span class=\"keyword\">and</span> isinstance(self._closing_reason,</span><br><span class=\"line\">                                     exceptions.ChannelClosedByBroker):</span><br><span class=\"line\">        LOGGER.debug(<span class=\"string\">'Channel close by broker detected, raising %r; %r'</span>,</span><br><span class=\"line\">                     self._closing_reason, self)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> self._closing_reason  <span class=\"comment\"># pylint: disable=E0702</span></span><br></pre></td></tr></table></figure>\n<p>从代码可以看到，<code>channel.start_consuning()</code>会调用到<code>connection.process_data_events()</code>，而且参数是<code>None</code>，就是说会一直等待消息。</p>\n<hr>\n<p>最后，我实在得吐槽一下，网上有一些博文感觉是真的不知道有没有验证过，我在查怎么处理耗时任务而导致连接断开的时候，很多博文都说用<code>connection.process_data_events()</code>就可以避免了，但是验证了一下，该报错的还是报错。还是自己动手，丰衣足食吧。</p>\n","categories":[],"tags":["python, pika, rabbitmq"]},{"title":"日语笔记","url":"https://iamting93.github.io/2019/09/15/language/janpanese/日语笔记/","content":"<p>日语笔记~</p>\n<a id=\"more\"></a>\n<ol>\n<li>数量词 + も + あります/います：　                （居然，竟然）有…。 表示数量超过预测或极限</li>\n<li>疑问词 + か：                                   不定指，如何か:什么, 誰か：人， 何処か：什么</li>\n<li>疑问词后面不接は</li>\n</ol>\n","categories":["语言"],"tags":[]},{"title":"linux下利用pyinstaller打包scrapy","url":"https://iamting93.github.io/2019/08/31/python/linux下利用pyinstaller打包scrapy/","content":"<p>要把爬虫部署到第三方云上面，自然是不能直接把代码扔上去的。若果编译成.pyc文件打包放上去，也不太保险。最后就调了python里面常用的打包工具pyinstaller，官方教程点<a href=\"https://pyinstaller.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>如何利用pyinstaller打包scrapy，其实网上有很多例子，譬如<a href=\"https://blog.csdn.net/u010600274/article/details/99345367\" target=\"_blank\" rel=\"noopener\">这篇</a>，但是网上大多都是说如何打包成exe的，那么在linux下怎么打包呢？pyinstaller不是一个跨平台的打包工具，在windows下会打包成exe，在linux就会打包成linux下运行的elf，但是步骤都是一样的，所以可以参考上面推荐例子来打包。这里就不重复造轮子了，主要讲讲打包过程中踩过的坑。</p>\n<p>首先，了解一下pyinstaller的打包方式，若果是打包成一个可执行文件，那么pyinstaller就会把python文件编译成.pyc文件并且嵌入到可执行文件中。pyinstaller打包时候会分析需要的模块，并且打包进去。</p>\n<pre><code>To find out, PyInstaller finds all the import statements in your script. \nIt finds the imported modules and looks in them for import statements, \nand so on recursively, until it has a complete list of modules your script may use.\n</code></pre><p>譬如输入命令行<code>pyinstaller -F test.py</code>，pyinstaller首先会查找test.py里面的import语句，然后导入这些模块A，然后再从模块A中再查找import语句，导入其它依赖的模块B，如此类推，直到所有所有需要的模块的都找到。在打包的时候生成<code>build/</code>文件夹里有一个xref-xxx.html文件，列出了打包test.py所需要的所有模块。</p>\n<p>另外，pyinstaller连python的解释器都拷贝进执行文件中，所以执行文件可以直接运行，不管计算机是否有python运行环境，但是这样的问题就是打包后的文件比较大。</p>\n<p>从以上的描述可以知道，pyinstaller打包进去的文件都是静态加载的，对于动态加载的模块，也就是<code>hiddenimports</code>,pyinstaller是不会打包进去的，需要手动在打包配置文件<code>.spec</code>里面指定。</p>\n<p>说完pyinstaller，再来看scrapy。按照官方的说法是，scrapy是低耦合的爬虫的框架，也就是说用户可以按照给定的API格式编写自己的组件，然后scrapy会在运行的时候动态加载，是的，动态加载。譬如爬虫组件，在scrapy源码里是这样加载进去的。</p>\n<p>首先动态加载爬虫文件所在的包：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">walk_modules</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Loads a module and all its submodules from the given module path and</span></span><br><span class=\"line\"><span class=\"string\">    returns them. If *any* module throws an exception while importing, that</span></span><br><span class=\"line\"><span class=\"string\">    exception is thrown back.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    For example: walk_modules('scrapy.utils')</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mods = []</span><br><span class=\"line\">    mod = import_module(path)</span><br><span class=\"line\">    mods.append(mod)</span><br><span class=\"line\">    <span class=\"comment\"># 递归获取子模块,dfs</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(mod, <span class=\"string\">'__path__'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _, subpath, ispkg <span class=\"keyword\">in</span> iter_modules(mod.__path__):</span><br><span class=\"line\">            fullpath = path + <span class=\"string\">'.'</span> + subpath</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ispkg:</span><br><span class=\"line\">                mods += walk_modules(fullpath)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                submod = import_module(fullpath)</span><br><span class=\"line\">                mods.append(submod)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mods</span><br></pre></td></tr></table></figure>\n<p><code>submod</code>里是爬虫类所在的modul，然后再提取这些爬虫类对象。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">iter_spider_classes</span><span class=\"params\">(module)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Return an iterator over all spider classes defined in the given module</span></span><br><span class=\"line\"><span class=\"string\">    that can be instantiated (ie. which have name)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># this needs to be imported here until get rid of the spider manager</span></span><br><span class=\"line\">    <span class=\"comment\"># singleton in scrapy.spider.spiders</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> scrapy.spiders <span class=\"keyword\">import</span> Spider</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> six.itervalues(vars(module)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> inspect.isclass(obj) <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">           issubclass(obj, Spider) <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">           obj.__module__ == module.__name__ <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">           getattr(obj, <span class=\"string\">'name'</span>, <span class=\"literal\">None</span>):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> obj</span><br></pre></td></tr></table></figure>\n<p>所以爬虫的类是一个动态加载的过程。</p>\n<p>其实不止爬虫模块，还有scarp, engine, downloadmiddleware等等scrapy的主要组件，都是动态加载的，也就是说pyinstaller都不会打包进可执行文件中。虽然打包过程没有问题，但是到了真正运行的时候就会报<code>ImportError: No module named &#39;...&#39;</code>的错误，其实都是这个原因导致的。</p>\n<p>解决这个问题就是提示缺哪个模块，就在打包配置文件<code>.spec</code>的<code>hiddenimports</code>中加入这个模块。</p>\n<p>除了这个<code>ImportError</code>的错误外，还会碰到<code>FileNotFound</code>的错误，这是因为和动态加载一样，pyinstaller也不会主动打包数据文件，同样需要在打包配置文件<code>.spec</code>的<code>datas</code>字段中，具体还是写法还是参考<a href=\"https://blog.csdn.net/u010600274/article/details/99345367\" target=\"_blank\" rel=\"noopener\">例子</a>。</p>\n<p>此外，还曾遇到过一种情况，就是在本地环境能够运行爬虫，但是打包后就提示<code>KeyError: &#39;Spider not found: xxx</code>，这里得检查两个地方。</p>\n<ol>\n<li><p>正如上文所述，pyinstaller不会主动打包动态加载的文件，所以需要检查爬虫文件是否已经打包进去。</p>\n</li>\n<li><p><code>scrapy.cfg</code>这个scrapy的项目配置文件是否打包进去，或者是否和可执行文件在同一个目录下。没这个文件，scrapy会认为它不是在一个项目工程里面，所以找<code>settings.py</code>时候会有问题，导致不加载爬虫模块。</p>\n</li>\n</ol>\n<p>还有一个情况就是，执行文件可以成功运行，但是感觉就是卡住了一样不往下执行，也没有错误信息打印出来。这种情况下其实就是程序出错了，但是scrapy很迷的是异常抛出姿势有点问题，要知道错误原因，得修改一下源码。</p>\n<p>修改一下scrapy这个第三方库里面crawler.py文件，位置是安装python的根目录下的<code>Lib/site-packages/scrapy/crawler.py</code>，找到以下代码，并且修改。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@defer.inlineCallbacks</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">       <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> self.crawling, <span class=\"string\">\"Crawling already taking place\"</span></span><br><span class=\"line\">       self.crawling = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">try</span>:</span><br><span class=\"line\">           self.spider = self._create_spider(*args, **kwargs)</span><br><span class=\"line\">           self.engine = self._create_engine()</span><br><span class=\"line\">           <span class=\"comment\"># 这里调用了spider的start_requests，返回的是一个request</span></span><br><span class=\"line\">           start_requests = iter(self.spider.start_requests())</span><br><span class=\"line\">           <span class=\"keyword\">yield</span> self.engine.open_spider(self.spider, start_requests)</span><br><span class=\"line\">           <span class=\"keyword\">yield</span> defer.maybeDeferred(self.engine.start)</span><br><span class=\"line\">       <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">           <span class=\"comment\"># In Python 2 reraising an exception after yield discards</span></span><br><span class=\"line\">           <span class=\"comment\"># the original traceback (see https://bugs.python.org/issue7563),</span></span><br><span class=\"line\">           <span class=\"comment\"># so sys.exc_info() workaround is used.</span></span><br><span class=\"line\">           <span class=\"comment\"># This workaround also works in Python 3, but it is not needed,</span></span><br><span class=\"line\">           <span class=\"comment\"># and it is slower, so in Python 3 we use native `raise`.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\"># 打印错误信息</span></span><br><span class=\"line\">           print(e)</span><br><span class=\"line\">           <span class=\"keyword\">if</span> six.PY2:</span><br><span class=\"line\">               exc_info = sys.exc_info()</span><br><span class=\"line\"></span><br><span class=\"line\">           self.crawling = <span class=\"literal\">False</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> self.engine <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">               <span class=\"keyword\">yield</span> self.engine.close()</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> six.PY2:</span><br><span class=\"line\">               six.reraise(*exc_info)</span><br><span class=\"line\">           <span class=\"keyword\">raise</span></span><br></pre></td></tr></table></figure>\n<p>就是把这个<code>Exception</code>的错误信息给打印出来，就知道问题出在哪里了。</p>\n<hr>\n<p>总结：</p>\n<p>这个scrapy的打包问题纠结了我好几天，主要是因为scrapy的动态加载导致了很多问题。对scrapy的源码研读还不够深，<code>scrapy.cfg</code>这个文件没有打包的这个坑我就找了很久才忽然想起。网上很多的例子都是抄来抄去，很难找到说到问题上的，打铁还需自身硬啊。</p>\n","categories":[],"tags":["python, scrapy"]},{"title":"20190717","url":"https://iamting93.github.io/2019/07/17/diary/20190717/","content":"<h2 id=\"2019-07-17日记\"><a href=\"#2019-07-17日记\" class=\"headerlink\" title=\"2019-07-17日记\"></a>2019-07-17日记</h2><a id=\"more\"></a>\n<p>哈哈哈，现在重新维护博客</p>\n<p>因为感觉最近学到的东西蛮多的，碰到的问题也多，但是脑子不好使了。</p>\n<p>最近在忙爬虫的事，碰到问题很多，想想，最近就以爬虫为主吧，每周一结。</p>\n<p>坚持是难得的品质</p>\n<hr>\n<p>To Be Better One</p>\n","categories":["日记"],"tags":[]},{"title":"tensorflow 分布式部署踩坑经历","url":"https://iamting93.github.io/2018/10/24/tensorflow/tensorflow 分布式部署踩坑经历/","content":"<p>世上本没有坑，挖的人多了，自然就有坑了。<br><a id=\"more\"></a></p>\n<p>公司最近要搭一个分布式集群来训练数据，作为一个无知而又热爱求知的小白，自然被虐得头发都掉了一地。</p>\n<p>花了整整2.5个星期后，终于在开源哥们的指导下才大概估计到原因所在，最后才在华为的一个技术贴上找到答案，那时候真是Duang的一声，看着程序终于跑起来的那一刻，真的是想来个夕阳下的奔跑来庆祝一下。这过程真的不容易啊，期间基本把google和百度的资料不管相关和不相关都翻了个遍，也没有很好解决问题，那时候心态是真的爆炸了，最后改了一下关键字，才在谷歌结果的最后一页看到华为的帖子有那么几个字相关，没想到点开后就打开了新世界，激动!!!!!</p>\n<hr>\n<p>扯淡到此为止，现在来介绍一下部署细节。</p>\n<p>本部署是基于ubuntu 16.04 + hadoop + spark + tensorflowOnSpark + tensorflow 1.8</p>\n<p>这里集群的环境是1个ps和2个worker</p>\n<h4 id=\"hadoop和spark部署\"><a href=\"#hadoop和spark部署\" class=\"headerlink\" title=\"hadoop和spark部署\"></a>hadoop和spark部署</h4><p>hadoop和spark的部署这里不做叙述，网上的资料一大堆，按照来基本上没有问题，有问题的话再找一个其它靠谱的再配，反正最终能运行就可以了。</p>\n<h4 id=\"tensorflow和tensorflowOnSpark安装\"><a href=\"#tensorflow和tensorflowOnSpark安装\" class=\"headerlink\" title=\"tensorflow和tensorflowOnSpark安装\"></a>tensorflow和tensorflowOnSpark安装</h4><p>这里是采取yarn作为资源管理器，具体安装过程可以参考<a href=\"https://github.com/yahoo/TensorFlowOnSpark/wiki/GetStarted_YARN\" target=\"_blank\" rel=\"noopener\">官网</a>。网上很多文章都说官方说明文档简略，但是其实踩完坑后发觉，其实真的就这么简略，跑不起来，大多是和自身集群的配置有关。所以这些坑得自己填，官方也只能给提示。</p>\n<p>一句话，<code>官方的说明文档是可以跑起来的</code>！</p>\n<hr>\n<p>好了，是时候该说一下碰到的坑了。<br>本人是按官方说明文档，执行到<a href=\"https://github.com/yahoo/TensorFlowOnSpark/wiki/GetStarted_YARN#run-distributed-mnist-training-using-feed_dict\" target=\"_blank\" rel=\"noopener\">Run distributed MNIST training (using feed_dict)</a>这一步就入坑了。</p>\n<p>碰到的坑大致如下:</p>\n<pre><code>Timeout while feeding partition\n</code></pre><p>看提示，就是在输入的数据的时候超时了。既然超时了，冒出脑海的第一个想法就是数据能从hadoop上下载下来吗?然后就在代码里加了log来验证，没想到还真的能下载下来，GG，这时候就傻了，既然能下下来，说明和hadoop的通信是没有问题的，那问题的根源在哪里呢？谷歌和百度呗，恭喜，你会发现关于这个问题，搜索的结果要么是不在点上，要么是不相关，要么是广告（你懂的）。这时候就绝望了，log就那么点，搜索的结果都是解决不了问题，只能另辟蹊径，找其它log。</p>\n<p>在终端上输入<code>yarn logs -applicationId &lt;your applicationId&gt;</code>，然后屏幕上冒出N多的log，若果你运行够久的话，可能会看到类似如下的log</p>\n<pre><code>CreateSession still waiting for response from worker: /job:ps/replica:0/task:0\nCreateSession still waiting for response from worker: /job:worker/replica:0/task:0\n</code></pre><p>没错，这就是本人踩得要死去活来的坑！！！</p>\n<p>从log信息来看，当前节点在等ps0和worker0的响应，但是一连串的log说明了这两个节点并没有返回响应，那问题出在哪里呢？goole和baidu呗，网上什么重启，什么worker0完成太快，worker1还没完成所以被挂起，什么<code>ClusterSpec</code>配置有问题，什么防火墙没关等等，各种各样的方法都没用，我甚至一度怀疑是ssh有问题(原谅我是小白)，改了也是啥作用都没有啊。总之，反正沾边的链接打开照着做了N次也是没作用，吐了一地的老血。</p>\n<p>就这样搞了几天后，在github上看到一个<a href=\"https://github.com/yahoo/TensorFlowOnSpark/issues/340\" target=\"_blank\" rel=\"noopener\">帖子</a>，描述的现象和我还蛮像的，但是提帖子的哥们后面失踪了，也没反馈结果是怎么样。于是自己照着开源哥们提的建议，检查了权限问题，也是没用。这时候实在没办法了，只能自己也跟帖了，开源小哥回复还是蛮快的，指出节点不能相互访问，额，虽然没具体给出解决方法，但起码指明了排查了方向。于是跑了一次原生的tensorflow分布式代码，也是运行失败，至此，问题的根源锁定在tensorflow上，和hadoop什么的一点关系都没有，范围一下缩小了。于是重新谷歌，终于在华为的一个<a href=\"https://bbs.huaweicloud.com/blogs/463145f7a1d111e89fc57ca23e93a89f\" target=\"_blank\" rel=\"noopener\">技术贴</a>上找到原因</p>\n<pre><code>另外一种情况也会导致该问题的发生，从TensorFlow-1.4开始，分布式会自动使用环境变量中的代理去连接，如果运行的节点之间不需要代理互连，那么将代理的环境变量移除即可，在脚本的开始位置添加代码：\n# 注意这段代码必须写在import tensorflow as tf或者import moxing.tensorflow as mox之前\n\nimport os\nos.environ.pop(&apos;http_proxy&apos;)\nos.environ.pop(&apos;https_proxy&apos;)\n</code></pre><font color=\"#0099ff\" size=\"7\" face=\"黑体\">代理！！！！！！</font>\n\n<p>忽然想起之前写爬虫的时候也被公司的代理坑了一下，但是没放在心上，想不到。。。。。</p>\n<p>于是把删除代理配置的代码加入到脚本中，居然<font color=\"#ff0000\" size=\"7\" face=\"黑体\">能运行了</font>。老泪纵横~~</p>\n<p>哈哈哈，既然查明原因，接下来就好办了。到每个节点上，把关于代理配置的代码都去掉，重新运行<a href=\"https://github.com/yahoo/TensorFlowOnSpark/wiki/GetStarted_YARN#run-distributed-mnist-training-using-feed_dict\" target=\"_blank\" rel=\"noopener\">Run distributed MNIST training (using feed_dict)</a>的脚本代码, SUCCEED!!!</p>\n<p>我的乖乖，网上怎么就没有人碰到这种情况呢…..</p>\n<p>除了以上的坑，还遇到过如下的</p>\n<pre><code>waiting for 1 reservations\n</code></pre><p>关于这个坑，我是因为其它节点重启后，没有重新执行启动分布式的脚本，导致重启的节点没有与master联系，master一直在等重启的节点响应。当然<a href=\"https://blog.csdn.net/jiangpeng59/article/details/72867368\" target=\"_blank\" rel=\"noopener\">网上</a>也有说是要<code>设置spark.cores.max(集群总核数)和spark.task.cpus(worker节点分配核数)满足spark.cores.max/spark.task.cpus=workernumber</code>，总之，这个检查一下有没出现上述的情况就可以了</p>\n<pre><code>&apos;AutoProxy[get_queue]&apos; object has no attribute &apos;put&apos;\n</code></pre><p>这个坑也见了好多次，最后是按照这个<a href=\"https://github.com/yahoo/TensorFlowOnSpark/issues/248\" target=\"_blank\" rel=\"noopener\">帖子</a>，在脚本上加上<code>--executor-cores 1</code>就ok了，具体原理也没深究…</p>\n<h4 id=\"体会\"><a href=\"#体会\" class=\"headerlink\" title=\"体会\"></a>体会</h4><p>作为一个毫无经验的小白来说，一开始是按官方说明文档来配置的，发生问题都不知道怎么分析，只能谷歌百度，胡乱配置，所以碰了不少的壁，吃力不讨好。后面还是下决心补了一下基本知识，像tensorflow 分布式里面的ps、worker概念，以及spark，hadoop的基本概念，架构等等，就上手很多了，所谓“工欲善其事必先利其器”，既增长了经验，又解决问题，这点学习时间还是性价比很高的。</p>\n","categories":[],"tags":["tensorflow"]},{"title":"scrapy 日志输出踩过的坑","url":"https://iamting93.github.io/2018/10/24/python/scrapy 日志输出踩过的坑/","content":"<p>最近在写爬虫，记录一下在日志输出的时候踩过的坑</p>\n<p>scrapy使用的日志输出库是python的标准输出模块logging，使用方法网上一<a href=\"https://www.cnblogs.com/yyds/p/6901864.html\" target=\"_blank\" rel=\"noopener\">大堆</a>。配置方式参考<a href=\"https://www.cnblogs.com/yyds/p/6885182.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>在开发中一开始是用<a href=\"https://docs.python.org/3.7/library/logging.config.html#logging.config.fileConfig\" target=\"_blank\" rel=\"noopener\">logging.config.fileConfig</a>,但是这个配置方式不能使用filter组件，只好换了一个功能更强大的<a href=\"https://docs.python.org/3.7/library/logging.config.html#logging.config.dictConfig\" target=\"_blank\" rel=\"noopener\">logging.config.dictConfig</a>。</p>\n<p>类似的代码如<a href=\"https://blog.csdn.net/caoxinjian423/article/details/84196609\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>运行代码后，发现的问题就是scrapy本身自带的日志输出功能全部都没有了，无论怎么样都不输出。对代码进行debug，发现scrapy的logger都被disabled了。继续调试，发现在自定义的输出日志语句之前，scrapy的logger都是disabled=False的，但是执行完自定义的logging输出日志语句后，scrapy的logger就变成了disabled=True了。这里是真的百思不得其解。经过大量的面向谷歌后，终于发现在<a href=\"https://docs.python.org/3.7/library/logging.config.html#logging.config.fileConfig\" target=\"_blank\" rel=\"noopener\">官方文档</a>里有那么一句话。</p>\n<pre><code>Note If you want to send configurations to the listener which don’t disable existing loggers,\nyou will need to use a JSON format for the configuration, which will use dictConfig() for configuration.\nThis method allows you to specify disable_existing_loggers as False in the configuration you send.\n</code></pre><p>disable_existing_loggers默认为true，这个会把scrapy的logger给disabled了</p>\n<p>在json的配置文件里，加上那么一句<code>disable_existing_loggers:false</code>。scrapy的log就都输出来了，问题解决。</p>\n<hr>\n<p>还有一个关于在多进程下利用ConcurrentLogHandler输出日志的问题，在linux下正常工作，但是在windows下，写文件的时候会被锁住挂起。解决方法是用<a href=\"https://github.com/Preston-Landers/concurrent-log-handler\" target=\"_blank\" rel=\"noopener\">concurrent-log-handler</a>进行替代，参考<a href=\"https://blog.csdn.net/wkb342814892/article/details/80281182\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<hr>\n<p>总结:因为都是边做边学，所以都没有好好研究过，特别是官方文档，浪费的时间有点多。还是那句老话，工欲善其事必先利其器，还是得先静下心来学习。</p>\n","categories":[],"tags":["python, scrapy"]},{"title":"Floyd算法","url":"https://iamting93.github.io/2018/04/12/algorithm/Floyd/Floyd算法/","content":"<p>本文将简单介绍求带权的多源最短路径长度的Floyd算法</p>\n<a id=\"more\"></a>\n<p>其实关于Floyd算法，网上就有一篇很通俗易懂，生动有趣的博文《<a href=\"http://developer.51cto.com/art/201403/433874.htm\" target=\"_blank\" rel=\"noopener\">坐在马桶上看算法：只有五行的Floyd最短路算法</a>》，所以这里就不打算重复造轮子了。</p>\n<p>还是谈谈对这个算法的理解。</p>\n<p>这个算法，说白了，就是对每两个点使用规则：中转点b能否使得<code>dist(a-&gt;z) &lt; dist(a-&gt;b) + dist(b-&gt;z)</code>成立,成立的话，那么a和z之间的距离就为dist(a-&gt;b) + dist(b-&gt;z)，然后再遍历其它中转点c,d,e,f等，看上述规则是否成立。这个与<a href=\"https://iamting93.github.io/2018/04/10/algorithm/Djikstra/Djikstra%E7%AE%97%E6%B3%95/\">Djistra算法</a>有点类似，不过Djistra算法是单源的。</p>\n<p>所以真的很好理解，代码很好写，不过代价就是O(n^3)的时间复杂度。</p>\n<p>以下是核心代码。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(k = <span class=\"number\">1</span>; k &lt;= n; k++) &#123; <span class=\"comment\">// k是用来遍历中转点的，要放在最外层循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[i][j] &gt; dist[i][k] + dist[k][j]) &#123;</span><br><span class=\"line\">                dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["algorithm"]},{"title":"Djikstra算法","url":"https://iamting93.github.io/2018/04/10/algorithm/Djikstra/Djikstra算法/","content":"<p>本文将简单介绍求带权的单源最短路径长度的Djikstra算法</p>\n<a id=\"more\"></a>\n<p><b>问题:假设正在进行一场从广州到北京的旅行，途中会经过很多城市，每两个城市之间所花的时间长短不一。要怎样选择路线才能使得所花的时间最短？</b></p>\n<p>最简单的想法就是每次都从中转城市里挑一个所花时间最短的城市A，去到城市A后就更新一下到其他城市所需要的时间表，即从广州出发，通过城市A到其他城市(如城市B)的时间t是否比从广州直接到城市B的时间u要短，是的话就用时间t更新从广州直接到城市B所花的时间信息，然后从时间表中再挑一个所花时间最短的且未曾到访的城市X，重复以上操作，直到遍历完所有的城市。当遍历完后，就可以很容易知道从广州到北京的所花的最短时间了。</p>\n<p>下面对上述的过程进行更抽象的描述。</p>\n<p>假设现在有如下的图，我们需要计算从0号点到5号点的最短距离。</p>\n<p><img src=\"/img/algorithm/Djikstra/map.jpg\" alt=\"map\" title=\"map\"></p>\n<p>假设有一个表dist，记录着从出发点(0号点)到其他点的最短距离。还有一个表visited，记录着已经访问过的点。</p>\n<ol>\n<li><p>对表dist和表visited进行初始化。<br> 与0号点直接邻接的点，它们之间距离就是直接距离；而不相邻的点，它们之间的距离是无限远。所以此时表dis和表visited的状态如下。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step1_dist.jpg\" alt=\"step1_表dist\" title=\"step1_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step1_visited.jpg\" alt=\"step1_表visited\" title=\"step1_表visited\"></p>\n</li>\n<li><p>从表dist中可以知道，从0号点出发，到2号点的距离是最短的，所以选择2号点作为下一个拓展的点，标记为visited。此时需要更新表dist的信息。更新的原则是<code>若dist(a-&gt;b) + dist(b-&gt;c) &lt; dist(a-&gt;c)，则选择dist(a-&gt;b) + dist(b-&gt;c)作为从a到c的距离</code>，也就是说经过中转点距离比直接去的距离还要少。遍历那些还没有visited的点后，得到的表dist和表visted如下。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step2_dist.jpg\" alt=\"step2_表dist\" title=\"step2_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step2_visited.jpg\" alt=\"step2_表visited\" title=\"step2_表visited\"></p>\n<p> 譬如，原本0-&gt;3的距离是无穷远，但从0-&gt;2-&gt;3的距离为6，所以更新0-&gt;3的距离为6。</p>\n</li>\n<li><p>重复上述的操作，直到所有的点都遍历完。这里给出每一步操作后表dist和表visited的状态。</p>\n<p> 第三步，拓展1号点。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step3_dist.jpg\" alt=\"step3_表dist\" title=\"step3_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step3_visited.jpg\" alt=\"step3_表visited\" title=\"step3_表visited\"></p>\n<p> 第四步，拓展3号点。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step4_dist.jpg\" alt=\"step4_表dist\" title=\"step4_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step4_visited.jpg\" alt=\"step4_表visited\" title=\"step4_表visited\"></p>\n<p> 第五步，拓展4号点。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step5_dist.jpg\" alt=\"step5_表dist\" title=\"step5_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step5_visited.jpg\" alt=\"step5_表visited\" title=\"step5_表visited\"></p>\n<p> 第六步，拓展5号点。</p>\n<p> <img src=\"/img/algorithm/Djikstra/step6_dist.jpg\" alt=\"step6_表dist\" title=\"step2_表dist\"></p>\n<p> <img src=\"/img/algorithm/Djikstra/step6_visited.jpg\" alt=\"step6_表visited\" title=\"step6_表visited\"></p>\n</li>\n</ol>\n<p>从上面的描述中可以看出，Djikstra算法是采取了贪心策略：每次都选距离最短的。<br>当所有距离都相等的时候，Djikstra算法退化为广度优先搜索(BFS)。</p>\n<p>下面给出代码</p>\n<p>Djikstra.hpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> TING_DIJKSTRA_CPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TING_DIJKSTRA_CPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 0x2ffffff</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_SIZE 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Djikstra</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Djikstra();</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Djikstra();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">run</span><span class=\"params\">(<span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; size, <span class=\"keyword\">int</span>* out, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; from, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; to)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; size)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDistance</span><span class=\"params\">(<span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; size)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectNearestNode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isVisited</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; node)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVisited</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; node)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateDistance</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; chooseNode, <span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>* mDistance;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span>* mVisited;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mFrom;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mTo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mSize;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// !TING_DIJKSTRA_CPP</span></span></span><br></pre></td></tr></table></figure></p>\n<p>Djikstra.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Dijkstra.hpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Djikstra::Djikstra() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Djikstra::~Djikstra() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDistance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> mDistance;</span><br><span class=\"line\">        mDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mVisited) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> mVisited;</span><br><span class=\"line\">        mVisited = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param map   the data matrix</span></span><br><span class=\"line\"><span class=\"comment\"> * @param size  size of matrix</span></span><br><span class=\"line\"><span class=\"comment\"> * @param out   output</span></span><br><span class=\"line\"><span class=\"comment\"> * @param from  the begining node</span></span><br><span class=\"line\"><span class=\"comment\"> * @param to    the ending node</span></span><br><span class=\"line\"><span class=\"comment\"> * @return true if successful</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Djikstra::run</span><span class=\"params\">(<span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; size, <span class=\"keyword\">int</span>* out, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; from, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; to)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; MAX_SIZE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mFrom = from;</span><br><span class=\"line\">    mTo = to;</span><br><span class=\"line\">    mSize = size;</span><br><span class=\"line\"></span><br><span class=\"line\">    init(size);</span><br><span class=\"line\">    initDistance(<span class=\"built_in\">map</span>, size);</span><br><span class=\"line\">    setVisited(mFrom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; mSize; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = selectNearestNode();</span><br><span class=\"line\">        setVisited(node);</span><br><span class=\"line\">        updateDistance(node, <span class=\"built_in\">map</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *out = mDistance[to];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize the data member</span></span><br><span class=\"line\"><span class=\"comment\"> * param size   size of matrix</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Djikstra::init</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDistance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> mDistance;</span><br><span class=\"line\">        mDistance = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mVisited) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> mVisited;</span><br><span class=\"line\">        mVisited = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mDistance = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">    mVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[size];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        mDistance[i] = MAX;</span><br><span class=\"line\">        mVisited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize the mDistance data member</span></span><br><span class=\"line\"><span class=\"comment\"> * @param map   the data matrix</span></span><br><span class=\"line\"><span class=\"comment\"> * @param size  size of matrix</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Djikstra::initDistance</span><span class=\"params\">(<span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* _map = (<span class=\"keyword\">int</span>*)(<span class=\"built_in\">map</span> + mFrom);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mSize; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFrom == i) &#123;</span><br><span class=\"line\">            mDistance[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_map[i]) &#123;</span><br><span class=\"line\">            mDistance[i] = _map[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* select the closest and un-visited node to the beginning one</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Djikstra::selectNearestNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> node = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//choose the nearest node which has been not visited</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mSize; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != mFrom &amp;&amp; !isVisited(i) &amp;&amp; mDistance[i] &lt; min) &#123;</span><br><span class=\"line\">            min = mDistance[i];</span><br><span class=\"line\">            node = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* if the giving node is visited</span></span><br><span class=\"line\"><span class=\"comment\">* @param node   the node need to check</span></span><br><span class=\"line\"><span class=\"comment\">* @return if the node is visited</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Djikstra::isVisited</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mVisited[node];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * set the giving node visited</span></span><br><span class=\"line\"><span class=\"comment\"> * @param node  the node which has been visited</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Djikstra::setVisited</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; node)</span> </span>&#123;</span><br><span class=\"line\">    mVisited[node] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * update the distance for each node after choosing one nearest node</span></span><br><span class=\"line\"><span class=\"comment\"> * @param chooseNode    the node that newly visited</span></span><br><span class=\"line\"><span class=\"comment\"> * @param map           the data matrix</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Djikstra::updateDistance</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; chooseNode, <span class=\"keyword\">void</span>** <span class=\"built_in\">map</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* _map = (<span class=\"keyword\">int</span>*)(<span class=\"built_in\">map</span> + chooseNode * mSize);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mSize; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if distance(a-&gt;c) &gt; distance(a-&gt;b) + distance(b-&gt;c), then take distace(a-&gt;b) + distance(b-&gt;c)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = *(_map + i) ? *(_map + i) : MAX;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDistance[i] &gt; mDistance[chooseNode] + tmp) &#123;</span><br><span class=\"line\">            mDistance[i] = mDistance[chooseNode] + tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["algorithm"]},{"title":"02读书笔记","url":"https://iamting93.github.io/2018/02/21/reading/02月读书笔记/","content":"<p>《讲故事:如何有效说服他人》和《统计数据会说谎》的笔记</p>\n<a id=\"more\"></a>\n<p>2月份读了两本书，但是说实话，收获不是很大。</p>\n<p>《讲故事》一书偏向方法论，需要一边实践一边读才有效果，不然都是一些<br>毫无意义的废话，作用不大。若果没啥事，都不要浪费时间去读的书。</p>\n<p>《统计数据》一书，貌似说得很有道理，但是作为一个中国人来说，普遍的<br>数学逻辑和刨根问底的能力还是要比国外有人来说还是要高的，所以还是收获<br>不大。参见中国网友的真知灼见的见解。另外这本书成书在20世纪中旬，所以<br>知识还是有点简单。要吐槽的是，中文翻译真的是烂。</p>\n<p>总结：下次像这样的书就要少买，不值得。</p>\n","categories":[],"tags":["读书笔记"]},{"title":"数字图像处理第四章--图像文件之图像压缩","url":"https://iamting93.github.io/2018/01/16/digital image processing/数字图像处理第四章--图像文件之图像压缩/","content":"<p>本文章是左飞的《Visual.Cpp数字图像处理开发入门与编程实践》的第四章阅读笔记。</p>\n<a id=\"more\"></a>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["digital image processing"]},{"title":"数字图像处理第四章--图像文件","url":"https://iamting93.github.io/2018/01/14/digital image processing/数字图像处理第四章--图像文件/","content":"<p>本文章是左飞的《Visual.Cpp数字图像处理开发入门与编程实践》的第四章阅读笔记。</p>\n<a id=\"more\"></a>\n<h4 id=\"图像文件\"><a href=\"#图像文件\" class=\"headerlink\" title=\"图像文件\"></a>图像文件</h4><p><code>图像文件</code>：就是以数字形式存储的图像数据。</p>\n<p>图像文件一般由文件头、调色板数据和像素数据3部分组成。</p>\n<ul>\n<li>文件头：用于存放图像文件的各种参数，如图像的类型、宽度、高度等。</li>\n<li>调色板：图像的颜色索引表，指导图像正确地呈现色彩。真色彩图像中没有调色板。</li>\n<li>像素数据：图像信息的实体所在，存储了图像中各个点的像素信息。对于压缩数据来说，存在有损和无损两种形式。有损压缩通常以牺牲画面质量为代价换取了更高的压缩比。</li>\n</ul>\n<hr>\n<h4 id=\"BMP文件格式\"><a href=\"#BMP文件格式\" class=\"headerlink\" title=\"BMP文件格式\"></a>BMP文件格式</h4><h5 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h5><p>BMP文件由3部分组成，分别是位图文件头、位图信息和像素数据，其中位图信息又由位图信息头和调色板数据组成。位图文件头、位图信息头都是固定长度的，其中，位图文件头的长度是14字节，而位图信息头的长度是40字节，它们合起来称为图像文件头。像素数据位于BMP位图文件的最后。BMP位图文件的文件结果如下图所示。<br><img src=\"/img/digital_image_processing/BMP_Struction.jpg\" alt=\"BMP文件结构\" title=\"BMP文件结构\"></p>\n<h5 id=\"文件头和信息头\"><a href=\"#文件头和信息头\" class=\"headerlink\" title=\"文件头和信息头\"></a>文件头和信息头</h5><p>位图文件头是用来存储图像文件特征字符的结构体，这些特征字符标明了图像文件的大小和像素数据的存储位置等内容，如下图所示。<br><img src=\"/img/digital_image_processing/BMP_File_Head.jpg\" alt=\"BMP文件头\" title=\"BMP文件头\"></p>\n<p>位图信息头给出了更详尽的位图特征参数，如下图所示。<br><img src=\"/img/digital_image_processing/BMP_MESSAGE_HEAD_1.jpg\" alt=\"BMP信息头1\" title=\"BMP信息头\"><br><img src=\"/img/digital_image_processing/BMP_MESSAGE_HEAD_2.jpg\" alt=\"BMP信息头2\" title=\"BMP信息头\"></p>\n<h5 id=\"主要参数\"><a href=\"#主要参数\" class=\"headerlink\" title=\"主要参数\"></a>主要参数</h5><ol>\n<li><p>图像的宽度、高度和像素总位数</p>\n<p> BMP文件的位平面数恒为1.图像文件信息头中直接给出了图像的宽度、高度和每位像素等参数。</p>\n</li>\n<li><p>调色板</p>\n<p> BMP文件的调色板（如果有）一定位于文件开始位置后的第54个字节处。调色板的数量取决于图像的类型。</p>\n</li>\n<li><p>像素数据</p>\n<p> 像素数据的位置紧跟在调色板之后，在信息头处。在操作BMP文件中的像素数组时需要注意以下几点。</p>\n<ul>\n<li>BMP文件的像素数据每行字节数必须是四的整数倍。</li>\n<li>像素数据从底端的一行开始向上存入文件，行内仍保持从左至右的顺序。</li>\n<li>16色彩图像采用单一平面结构。</li>\n<li>真色彩图像的像素数据存放顺序是BGR，而非RGB。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"GIF文件格式\"><a href=\"#GIF文件格式\" class=\"headerlink\" title=\"GIF文件格式\"></a>GIF文件格式</h4><p>GIF是英文Graphics Interchange Format(图形交换格式)的缩写。总的来说GIF格式的特点是压缩比高，磁盘空间占用少。GIF文件只支持二值、16色、和256色3种图像类型，不支持真色彩图像。</p>\n<h5 id=\"文件结构-1\"><a href=\"#文件结构-1\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h5><p>GIF文件由全局信息表、调色板数据、局部信息表和像素数据4部分组成。全局信息表和局部信息表的长度是固定的，全局信息表的长度恒为13字节，而局部信息表的长度恒为10字节。一个GIF文件可能存储着多幅图像，但整个文件只有一个全局信息表，而每幅图像则各自拥有一个局部信息表，局部信息表以逗号做前导符，整个文件以分号结尾。如下图所示。<br><img src=\"/img/digital_image_processing/GIF_Struction.JPG\" alt=\"GIF文件结构\" title=\"GIF文件结构\"></p>\n<p>GIF图像文件以数据块为单位来存储图像的相关信息，常用图像文件快如下所示。<br><img src=\"/img/digital_image_processing/GIF_Block_1.JPG\" alt=\"GIF图像文件常用块1\" title=\"GIF图像文件常用块\"><br><img src=\"/img/digital_image_processing/GIF_Block_2.JPG\" alt=\"GIF图像文件常用块2\" title=\"GIF图像文件常用块\"></p>\n<p>按照上表所述的块的特征将他们分为以下3类。</p>\n<ol>\n<li><p>控制块</p>\n<p> 头部、逻辑屏幕描述块、图像控制扩充和尾记录，它们都属于控制块。控制块包含了用于控制处理数据流或设置硬件参数的信息。</p>\n</li>\n<li><p>成像块</p>\n<p> 成像块包括图像描述块、全局调色板、局部调色板、图像压缩数据和图像说明扩充块。它们包含了用于在显示设备上成像的信息和数据。</p>\n</li>\n<li><p>特殊用途块</p>\n<p> 特殊用途块包含了既不用于处理数据流也不用于在显示设备上成像的信息。它的成员包括图像注释扩充块和应用程序扩充块。</p>\n</li>\n</ol>\n<h5 id=\"文件块结构\"><a href=\"#文件块结构\" class=\"headerlink\" title=\"文件块结构\"></a>文件块结构</h5><ol>\n<li><p>文件信息头</p>\n<p> 文件信息头仅有6个字节，其中3个字节是GIF文件表示符，其值为“GIF”，另外3个字节显示版本号“87a”或“89a”，其结构定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gifheader</span> &#123;</span></span><br><span class=\"line\">\tBYTE buSignature[<span class=\"number\">3</span>];</span><br><span class=\"line\">\tBYTE byVersion[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125; GIFHEADER;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>逻辑屏幕描述块</p>\n<p> 逻辑屏幕可以指导如何显示图像，其结构定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gifscrdes</span> &#123;</span></span><br><span class=\"line\">\tWORD wWidth;\t\t\t\t<span class=\"comment\">// 逻辑屏幕宽度，2 Bytes</span></span><br><span class=\"line\">\tWORD wDepth;\t\t\t\t<span class=\"comment\">// 逻辑屏幕高度，2 Bytes</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">globalflag</span> &#123;</span></span><br><span class=\"line\">\t\tBYTE PalBits;\t\t\t<span class=\"comment\">// 全局调色板位数，3 Bits</span></span><br><span class=\"line\">\t\tBYTE SortFlag;\t\t\t<span class=\"comment\">// 短标志， 1 Bit</span></span><br><span class=\"line\">\t\tBYTE ColorRes;\t\t\t<span class=\"comment\">// 颜色方案，3 Bits</span></span><br><span class=\"line\">\t\tBYTE GlobalPal;\t\t\t<span class=\"comment\">// 全局调色板标志，1 Bit</span></span><br><span class=\"line\">\t&#125; GlobalFlag;</span><br><span class=\"line\">\tBYTE byBackground;\t\t\t<span class=\"comment\">// 背景色索引，1 Byte</span></span><br><span class=\"line\">\tBYTE byAspect;\t\t\t\t<span class=\"comment\">// 像素高宽比，1 Byte</span></span><br><span class=\"line\">&#125; GIFSCREDSC;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局调色板</p>\n<p> 这里的调色板与在BMP中所提及到的色板从本质上讲是一致的，GIF格式利用调色板来显示基于光栅的图像，全局调色板对于那些没有设置局部调色板的图像起作用。全局调色板包含一个按照字节顺序表示RGB色彩分量的色表，它的大小由GlobalFlag.PalBits来决定。在逻辑视屏描述块中的全局色表标志位置为1时表示有全局色表。</p>\n</li>\n<li><p>图像描述块</p>\n<p> 通常当一个GIF文件内包含有多幅图像时，一幅图像结束之后紧接着是下一幅图像的标识符，图像标识符以0x2C(‘,’逗号)字符开始，紧接着定义它的图像性质，包括图像相对于逻辑屏幕边界的偏移量X和Y、图像的宽度和高度，以及有无局部颜色列表和颜色列表大小等。图像描述块共10个字节，其结构如下图所示。<br><img src=\"/img/digital_image_processing/GIF_Block_Description_Block.JPG\" alt=\"GIF-图像描述块结构\" title=\"GIF-图像描述块结构\"><br> 其中m是局部颜色列表标志，该位为1是表示紧接在图像标识符的后面有一个局部颜色列表，为0则没有；i是交织标志，如果该位为1则表示图像数据使用交织方式进行排列，否则就是用顺序排列方式；s为分类标志，如果该位为1则表示紧接着的局部颜色列表分类排列；r是保留位;pixel表示局部颜色列表的大小。</p>\n</li>\n<li><p>局部调色板</p>\n<p> 调色板包含了一个按照RGB色彩分量的顺序排列的色表，该表作用于紧跟其后的图像数据。当局部色表标志位置位1时，该表出现，且其后紧跟图像的描述符。</p>\n</li>\n<li><p>图像注释扩充块</p>\n<p> 图像注释扩充块包含实际不属于GIF数据流的文本信息。这些文本信息包括图像的注释、描述等任何非控制和非图像数据。注释扩充江北解码器忽略，或保留到以后处理。该块是可选的。GIF中用识别码0xFE来判断一个扩充块是否是图像的注释扩充块。</p>\n</li>\n<li><p>应用程序扩充块</p>\n<p> 应用程序扩充块包含了应用说明信息，其块标记为0xFF，结构定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gifapplication</span> &#123;</span></span><br><span class=\"line\">\tBYTE byBlockSize;\t\t\t<span class=\"comment\">// 指定该应用程序扩展块的长度。</span></span><br><span class=\"line\">\tBYTE byIdentifier[<span class=\"number\">8</span>];\t\t<span class=\"comment\">// 指定应用程序的名称</span></span><br><span class=\"line\">\tBYTE byAuthentication[<span class=\"number\">3</span>];\t<span class=\"comment\">// 指定应用程序识别码</span></span><br><span class=\"line\">&#125; GIFAPPLICATION;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件结束块</p>\n<p> 该文件结束块是一个单字段块，它是GIF图像文件的最后一个字节，用来指示该数据流的结束，其取值固定为0x3B。</p>\n</li>\n<li><p>图像压缩数据</p>\n<p> 图像压缩数据由两部分组成：LZW编码长度（LZW Minimum Code Size）和图像数据。<br> 图像数据在压缩前有两种排列格式：连续和交织。其中连续方式按照从左到右、从上到下的顺序排列图像的光栅数据；交织是按下面的方法处理光栅数据。</p>\n<pre><code>创建四个通道保存数据，每个通道提取不同行的数据：\n第一通道提取从第0行开始每隔8行的数据；\n第二通道提取从第4行开始每隔8行的数据；\n第三通道提取从第2行开始每隔4行的数据；\n第四通道提取从第1行开始每隔2行的数据。\n以此类推......\n</code></pre></li>\n<li><p>控制扩充块</p>\n<p>图像控制扩充块可以放在一个图像块（图像标识符）或文本扩展块的前面，用来控制跟在其后的第一个图像的渲染方式。</p>\n</li>\n<li><p>图像文本扩充块</p>\n<p>图像文本扩充定义了与图像同时显示的文字信息。GIF中用识别码0x01来判断一个扩充块是否是图像的注释扩充块。</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"PNG文件格式\"><a href=\"#PNG文件格式\" class=\"headerlink\" title=\"PNG文件格式\"></a>PNG文件格式</h4><p>PNG(Portable Network Graphics)便携式网络图片为无损压缩位图图形文件格式，PNG格式被认为是目前保证不失真的格式。<br>PNG一方面吸取了GIF和JPG二者的优点，存储形式丰富，并允许使用类似GIF格式的调色板技术，支持真彩色图像，并且具备Alpha通道等特性；另一方面它能把图像文件压缩到极限以利于网络传输，但又能保留所有与图像品质有关的信息。</p>\n<h5 id=\"文件结构-2\"><a href=\"#文件结构-2\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h5><pre><code>PNG图像格式文件由一个8字节的PNG文件署名域和3个以上的后续数据块组成。PNG文件包括8字节文件署名（0x89 0x50 0x4E 0x47 0x0D 0x0A 0x1A 0x0A），用来识别PNG格式。也就是说对于一个PNG文件来说，其文件头总是由位固定的字节来描述。下图为一个标准的PNG文件结构。\n</code></pre><p><img src=\"/img/digital_image_processing/PNG_Struction.JPG\" alt=\"PNG文件结构\" title=\"PNG文件结构\"></p>\n<pre><code>PNG中的数据块分为两种类型，一种被称为关键数据块（Critical Chunk），是必须包含、读写软件也都必须要支持的数据块；另一种叫做辅助数据块（Ancillary Chunks），这是可选的数据块。下面是PNG文件中用到的数据块。\n</code></pre><p><img src=\"/img/digital_image_processing/PNG_Block_Type_1.JPG\" alt=\"PNG-数据块类型-1\" title=\"PNG-数据块类型-1\"><br><img src=\"/img/digital_image_processing/PNG_Block_Type_2.JPG\" alt=\"PNG-数据块类型-2\" title=\"PNG-数据块类型-2\"></p>\n<pre><code>每个PNG图片的数据块的结构都是一样的，如下所示。\n</code></pre><p><img src=\"/img/digital_image_processing/PNG_Block_Struction.JPG\" alt=\"PNG-数据块结构\" title=\"PNG-数据块结构\">    </p>\n<h5 id=\"关键数据块\"><a href=\"#关键数据块\" class=\"headerlink\" title=\"关键数据块\"></a>关键数据块</h5><pre><code>PNG中的关键数据块共有4个：文件头数据块（IHDR）、调色板数据块（PLTE）、图像数据块（IDAT）和图像结束数据块（IEND）。\n</code></pre><ol>\n<li><p>文件头数据块（IHDR）</p>\n<p> IHDR中包含有图像基本信息，作为第一个数据出现并只出现一次。文件头数据块由13字节组成，其结构定义如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IHDR</span> &#123;</span></span><br><span class=\"line\">\tBYTE Width;\t\t\t\t\t\t\t<span class=\"comment\">// 图像宽度，以像素为单位</span></span><br><span class=\"line\">\tBYTE Height;\t\t\t\t\t\t<span class=\"comment\">// 图像高度，以像素为单位</span></span><br><span class=\"line\">\tBYTE BitDepth;\t\t\t\t\t\t<span class=\"comment\">// 图像深度</span></span><br><span class=\"line\">\tBYTE ColorType;\t\t\t\t\t\t<span class=\"comment\">// 颜色类型</span></span><br><span class=\"line\">\tBYTE CompressionMethod;\t\t\t\t<span class=\"comment\">// 压缩方法（LZ77派生算法）</span></span><br><span class=\"line\">\tBYTE FilterMethod；\t\t\t\t\t<span class=\"comment\">// 滤波器方法</span></span><br><span class=\"line\">\tBYTE InterlaceMethod;\t\t\t\t<span class=\"comment\">// 隔行扫描方法</span></span><br><span class=\"line\">&#125; IHDR;</span><br></pre></td></tr></table></figure>\n<pre><code>* 色彩深度\nBitDepth指定图像的色彩深度。当图像为索引彩色图像时，改参数的取值为1、2、4或8；当图像为灰度图像时，该值得取值为1、2、4、8或16；当图像是真彩色图像时，该值的取值为8或16。\n\n* 颜色类型\nColorType指定图像的颜色类型。当图像为灰度图像时，该参数的取值为0；当图像为真彩色图像时，该参数的取值为2；当图像为索引彩色图像时，该参数的取值为3；当图像带Alpha通道数据的灰度图像时，该参数的取值为4；当图像为带Alpha通道数据的真彩色图像时，该参数的取值为6。\n\n* 隔行扫描方法\nInterlaceMethod指定图像的隔行扫描方法。当该值为0时，即表示非隔行扫描；当该值为1时，即表示采用Adam7隔行扫描方法。\n</code></pre></li>\n<li><p>调色板数据块（PLTE）</p>\n<p> PLTE数据块定义了图像的调色板信息，它包含有与索引彩色图像相关的彩色变换数据，这些数据可以包含1~256个调色板信息，每一个调色板信息由3个字节组成，调色板的长度应该是3的倍数。并不是所有的PNG格式的图片都有调色板数据块，真彩色图片可能就没有调色板数据块，必须放在图像数据块之前。</p>\n</li>\n<li><p>图像数据块（IDAT）</p>\n<p> IDAT数据块中存储了实际图像数据。PNG数据流允许包含多个连续顺序的图像数据块。</p>\n</li>\n<li><p>图像结束数据（IEND）</p>\n<p> IEND永远放在PNG文件的尾部，表示PNG数据流结束。事实上PNG文件结尾的12个字符永远是如下这样的序列：00 00 00 00 49 45 4E 44 AE 42 60 82。这是因为根据数据块结构的定义，IEND数据块的长度总是0（00 00 00 00），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p>\n</li>\n</ol>\n<h4 id=\"JPEG文件格式\"><a href=\"#JPEG文件格式\" class=\"headerlink\" title=\"JPEG文件格式\"></a>JPEG文件格式</h4><p>JPEG（联合照片专家组，Joint Photographic Experts Group）是一个国际数字图像压缩标准。它用有损压缩方式去除冗余的图像和彩色数据，获取极高的压缩率的同时能展现十分生动的图像。<br>JPEG被认为是目前压缩比最高的静态图像。JPEG编码有多种模式，其中最常用的JEPG编码是基于离散余弦变换的顺序型图像处理模式，又称为基线系统（Baseline）。</p>\n<h5 id=\"JPEG编码-解码的理论基础\"><a href=\"#JPEG编码-解码的理论基础\" class=\"headerlink\" title=\"JPEG编码/解码的理论基础\"></a>JPEG编码/解码的理论基础</h5><p>JPEG图像使用的是YCrCb模型。因为人眼对亮度Y的敏感度远大于色度差CrCb，因此可以再适当的程度上对CrCb进行削弱已达到压缩的目的。因此可以采取如下的做法，即每个像素点都保存一个8位的亮度值，每2x2个像素点保存一个CrCb值，这种程度的处理几乎不会引起图像在肉眼中的失真。</p>\n<p>下面是JPEG的编码以及解码过程。<br><img src=\"/img/digital_image_processing/JPEG_Encoding.JPG\" alt=\"JPEG-编码流程\" title=\"JPEG-编码流程\"><br><img src=\"/img/digital_image_processing/JPEG_Decoding.JPG\" alt=\"JPEG-解码流程\" title=\"JPEG-解码流程\"></p>\n<ol>\n<li>压缩原理<br>在正式进行JPEG编码之前，首先要对原始数据进行分块操作。此后的编码工作将以这些8x8数据块为单位进行；然后需要对数据进行一次离散余弦变换。进过变换后，图像中的低频分量都集中在在左上角，高频分量都分布在右下角。该低频分量通常包含了图像的主要信息，相比之下高频分量却不那么重要了，所以可以通过忽略高频分量来达到压缩的目的。注意离散余弦变换也是针对8x8数据块进行的，因此假如原始图片的长宽不是8的倍数，那么就需要先补成8的倍数。CrCb是以2x2的形式记录的，因此在大多数情况下，要将原始图像补成16x16的整数块，并按从左到右，从上到下的次序排列。</li>\n</ol>\n<p>在JPEG编码时将使用Forward DCT（FDCT）对图像进行离散余弦变换。在图像压缩一文中提到的二维离散余弦变换公式，当N = 8时，代入公式得到FDCT的变换公式如下：<br><img src=\"/img/digital_image_processing/JPEG_FDCT.JPG\" alt=\"JPEG-离散余弦变换\" title=\"JPEG-离散余弦变换\"></p>\n<p>被称为直流系数DC，其它F(u,v)被称为交流系数AC。</p>\n<pre><code>当对JPEG图像进行解码时，将使用Inverse DCT（IDCT），在图像压缩一文中提到的二维离散反余弦变换公式，当N = 8时，带入公式得到IDCT的变换公式如下：\n</code></pre><p><img src=\"/img/digital_image_processing/JPEG_IDCT.JPG\" alt=\"JPEG-离散反余弦变换\" title=\"JPEG-离散反余弦变换\"></p>\n<p>为了将高频分量去掉，需要进行量化处理，量化处理时JPEG编码中产生信息损失的根源。这里的量化指对经过FDCT变换后的频率系数进行量化，其目的在于减小非“0”系数的幅度及增加“0”值系数的数目。简单地说就是将某一个值除以量化表中对应的值。由于量化表左上角的值较小，右上角的值较大，这样就起到了保持低频分量，抑制高频分量的目的。这一步在实现的时候会对Y采用细量化，对CrCb采用粗量化，依次来提高压缩比。因此通常在两张不同的量化表，一张是针对Y的，一张是针对CrCb的。</p>\n<p>下面给出一张量化表的例子，下图为CCIR601标准电视图像所采用的的量化表，其中左图为色度量化表，右图为亮度量化表。观察量化表，不难发现表中的左上角的量化步距要比右下角的量化步距小，这样就满足对于高频分量的过滤要求。<br><img src=\"/img/digital_image_processing/JPEG_CCIR_Table.JPG\" alt=\"JPEG-量化表\" title=\"JPEG-量化表\"></p>\n<p>下面要做的工作称为Z字型编排。因为经过离散余弦变换之后，图像中低频分量会集中在左上角，其中F(0,0)，即直流（DC）系数，是8x8子块的平均值，具体操作中药对其进行单独编码。考虑到8x8图像块经过DCT变换之后得到的DC直流系数具有的数值较大和相邻8x8图像块的DC系数值变化不大这两大特点，JPEG压缩算法将使用差分脉冲编码调制(DPCM)技术，对相邻图像块之间的量化DC系数的差值(Delta)进行编码，Delta = DC(0,0)[k] - DC(0,0)[k-1]。对剩余的63个交流（AC）系数进行行程编码。为了保证低频分量先出现，高频分量后出现，以增加行程中连续“0”的个数，即增加“0”的游程长度，故而采用Z字型编排方案，如下图所示。<br><img src=\"/img/digital_image_processing/JPEG_Z_Sort.JPG\" alt=\"JPEG-Z字型编排方案\" title=\"JPEG-Z字型编排方案\"></p>\n<p>经过Z字型排列后，离散余弦变换系数的序号如下所示，这样就把一个二维的8x8矩阵变成了一个一维的1 x 64矢量，并满足频率较低的系数放在矢量的顶部的要求。<br><img src=\"/img/digital_image_processing/JPEG_Z_Sort._After.JPG\" alt=\"JPEG-Z字型编排后的DCT系数序号示意图\" title=\"JPEG-Z字型编排后的DCT系数序号示意图\"></p>\n<p>为了提高压缩比例，JPEG算法将对DPCM编码后的直流系数和行程编码后的交流系数使用熵编码做进一步的压缩JPEG中使用<a href=\"https://zh.wikipedia.org/wiki/%E8%8C%83%E6%B0%8F%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%B7%A8%E7%A2%BC\" target=\"_blank\" rel=\"noopener\">范式Huffman编码</a>(Canonical Huffman Code)来减少熵。基本思想通过使用某些强制的约定，仅通过很少的数据便能重构霍夫曼编码树的结构。</p>\n<p>后面所举的例子比较复杂，有兴趣可自行谷歌。</p>\n<h5 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h5><p>通常说的JPEG文件格式所保存的图像实际上是指JPEG和JFIF两种格式的混合体。JPEG格式规范本身定义了图像的压缩方式，同时它也被包括在定义分辨率和色彩模式的图像数据格式之中。而实际中能够读写JPEG文件格式的应用程序是以JFIF（JPEG文件交换格式，JPEG File Interchange Format）文件格式或其他类似格式保存图像数据的。</p>\n<p>对于JPEG和JFIF的关系可以作如下表述：JPEG本身只有描述如何将一个影像转换为位元组的数据串流，却并没有说明这些位元组如何在任何特定的存储媒体上被被封存起来。JFIF就详细地说明了如何从一个JPEG串流，产出一个适合于计算机存储和传输的图像格式。</p>\n<p>JPEG文件大体上可以认为是标记码和压缩数据的组合体。标记码部分给出了JPEG图像的所有特征信息，如图像的宽、高、Huffman表、量化表等，这与BMP中的头信息在作用上十分相似，但相比之下却要复杂得多。JPEG的每个标记都是由2个字节组成（不包括后面的参数），其前一个字节恒为0xFF。每个标记之前还可以添加数目不限的0xFF填充字节。</p>\n<p>常用的标记码和结构如下所示。<br><img src=\"/img/digital_image_processing/JPEG_Flags_1.jpg\" alt=\"JPEG-常用标记码\" title=\"JPEG-常用标记码\"><br><img src=\"/img/digital_image_processing/JPEG_Flags_2.jpg\" alt=\"JPEG-常用标记码\" title=\"JPEG-常用标记码\"></p>\n<p>较为普遍的JPEG文件的格式。(这里JPEG文件指的是JFIF形式的JPEG文件)。</p>\n<p><img src=\"/img/digital_image_processing/JPEG_Struction.jpg\" alt=\"JPEG-文件结构\" title=\"JPEG-文件结构\"></p>\n<p>JPEG文件的内容是包括图像开始标记和图像结束标记，以及它们之间的6个标记段和一组压缩数据共同组成的，标记段的格式是相应标记后加特征参数。有兴趣的可自行谷歌。</p>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["digital image processing"]},{"title":"数字图像处理第三章--色彩空间","url":"https://iamting93.github.io/2018/01/14/digital image processing/数字图像处理第三章--色彩空间/","content":"<p>本文章是左飞的《Visual.Cpp数字图像处理开发入门与编程实践》的第三章阅读笔记。</p>\n<a id=\"more\"></a>\n<h4 id=\"颜色特性\"><a href=\"#颜色特性\" class=\"headerlink\" title=\"颜色特性\"></a>颜色特性</h4><p><code>颜色</code>：光本质上是一种电磁波。人眼可以感受的波长范围内的电磁波称为可见光。可见光通过三棱镜时将被分解为由紫到红的连续彩色色谱。</p>\n<p><code>色相</code>：即色彩的相貌，如大红、柠檬黄等。色相由原色、间色和复色来构成。色相的差别是由光波波长的长短产生的。即便是同一类颜色，也能分为几种色相。</p>\n<p><code>色调</code>：代表着某种颜色的性质和特点，它是由物体表面反射的光线中什么波长占优势决定的。色调可以指色彩的明暗度，也可以指色彩的冷暖感。</p>\n<p><code>饱和度</code>：指图像颜色的彩度，表示光线的色彩深浅度或鲜艳程度，调整饱和度也就是调整图像的彩度。从原理上讲，可见光谱和各种单色是最饱和的。彩色光谱中掺入的白光成分越多，就越不饱和。对颜色而言，饱和度变化有两个趋势：一是变亮，相当于掺入白色成分；一是变暗，相当于加入灰色或黑色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般来说，人眼最大能区分128种不同的色彩，130种色饱和度和23种明暗度。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"色彩空间\"><a href=\"#色彩空间\" class=\"headerlink\" title=\"色彩空间\"></a>色彩空间</h4><p><code>色彩空间</code>：也称作色彩模型，是数学化描述色彩的基础。</p>\n<ol>\n<li>RGB颜色空间</li>\n<li>CMY/CMYK颜色空间：主要用于作画或印刷，颜料是会吸收光线，而不是增强光线。</li>\n<li>HSV/HSB(HSI/HCI/HSL)颜色空间</li>\n<li>YUV/YCbCr颜色空间：YUV是应用于电视机系统的一种颜色编码方法，主要用于优化彩色视频信号的传输，使其向后兼容老式黑白电视。因为他的亮度信号Y和色度信号U、V是分离的，所以如果没有U、V分量，那么这样表示的图就是黑白灰度图。</li>\n</ol>\n<h5 id=\"RGB转换到YUV的方法\"><a href=\"#RGB转换到YUV的方法\" class=\"headerlink\" title=\"RGB转换到YUV的方法\"></a>RGB转换到YUV的方法</h5><ul>\n<li>RGB -&gt; YUV<br>将R，G，B归一化，0 &lt;= R, G, B &lt;= 1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y = 0.299R + 0.587G + 0.114B</span><br><span class=\"line\">U = -0.14713R - 0.28886G + 0.436B</span><br><span class=\"line\">V = 0.615R - 0.51499G - 0.10001B</span><br></pre></td></tr></table></figure>\n<ul>\n<li>YUV -&gt; RGB</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R = Y + 1.13983U</span><br><span class=\"line\">G = Y - 0.39465U - 0.58060V</span><br><span class=\"line\">B = Y + 2.03211U</span><br></pre></td></tr></table></figure>\n<h5 id=\"RGB转换到YCbCr的方法\"><a href=\"#RGB转换到YCbCr的方法\" class=\"headerlink\" title=\"RGB转换到YCbCr的方法\"></a>RGB转换到YCbCr的方法</h5><p>R,G,B的取值范围是[0,255], 0 &lt;= Y &lt;= 255, 0 &lt;= Cb, Cr &lt; 256</p>\n<ul>\n<li>RGB -&gt; YCbCr</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y = 0.29900R + 0.58700G + 0.11400B</span><br><span class=\"line\">Cb = -0.16874R - 0.33126G + 0.50000B + 128</span><br><span class=\"line\">Cr = 0.50000R - 0.41869G - 0.08131B + 128</span><br></pre></td></tr></table></figure>\n<ul>\n<li>YCbCr -&gt; RGB</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R = Y + 1.402(Cr -128)</span><br><span class=\"line\">G = Y - 0.34414(Cb - 128) - 0.71414(Cr - 128)</span><br><span class=\"line\">B = Y + 1.772(Cb -128)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["digital image processing"]},{"title":"数字图像处理第一章--概述","url":"https://iamting93.github.io/2018/01/14/digital image processing/数字图像处理第一章--概述/","content":"<p>本文章是左飞的《Visual.Cpp数字图像处理开发入门与编程实践》的第一章阅读笔记。</p>\n<a id=\"more\"></a>\n<p><code>数字图像</code>有两种定义方式：</p>\n<ol>\n<li><p>相当于一个MxN的网格，每个网格用一定的颜色去填充，形成了所看到的完整图像。其中MxN称为图像的分辨率。分辨率越高，图像越逼真。色彩范围越广，用以表示色彩的位数越长，图像颜色就逼真。</p>\n</li>\n<li><p>进行数学建模。可以定义为函数func(x,y)，其中x和y是平面上的位置点坐标，而func(x,y)，表示这一点的图像的灰度或强度。当平面上的位置点与其对应的灰度或强度的关系满足函数func(x,y),且x,y与func(x,y)同时为有限的、离散的数值时，该图像就称为数字图像。</p>\n</li>\n</ol>\n<p><code>位图</code>：可以认为是将图像保存为点阵数据的一种形式，相当于将一个图形分割成许多大小相同的小格子，然后用颜色对其进行填充。</p>\n<p><code>图形设备接口</code>(GDI)：系统与程序之间交互的媒介，是在设备上输入图像的工具。</p>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["digital image processing"]},{"title":"铁齿铜牙纪晓岚","url":"https://iamting93.github.io/2018/01/09/essay/铁齿铜牙纪晓岚/","content":"<p>一己之见的音乐鉴赏<br><a id=\"more\"></a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=224326&auto=1&height=66\"></iframe>\n\n<pre><code>秋雁两行江上雨\n\n天南地北的人\n\n讲道理的是知己\n\n殿上君王堂下臣\n\n心存百姓的人\n\n百姓心中自有你\n\n说的都是理\n\n噢 唱的都是曲\n\n铁齿铜牙 两片嘴\n\n吃的是下锅的米\n\n噢 说的都是理\n\n噢 唱的都是曲\n\n铁齿铜牙 两片嘴\n\n吃的是下锅的米\n\n走的是人间的道\n\n扛的是顶风的旗\n\n铁齿铜牙两片嘴\n\n百姓心中有了你\n</code></pre><p>音乐开始的6句音调十分有味道</p>\n<p>两行、君王虽为一个完整的词语，但是这里却把它分拆开，即前三字为一小部分，后面四字为一小部分，听起来虽不是一气呵成，但是音律上，却是有意想不到的效果，婉转有味，让人在意，却不觉得别扭。</p>\n<p>天南地北的人这句，有一种转音的感觉，本来天南是低音，但是到地北，音调忽然高上去，给人一种慵懒之感。</p>\n<p>总体来说，女声是在咏唱的感觉，歌曲一开始就已经吸引耳朵。高潮重复部分，女声把那种赞叹的情感融于其中，让人不得不思考，到底是怎样的故事会让人有这种由衷之情。</p>\n<p>歌曲的题材，虽然是以人为主，而且是古装电视剧的片尾曲，但是听下来，不得不说</p>\n<p><strong>好歌</strong></p>\n<hr>\n<p>殿上君，堂下臣<br>和大人教做官，<br>纪大人教做人，</p>\n<p>小时候，<br>我们都渴望着要当纪晓岚这样的人，<br>却没有人愿意演和珅。<br>但是到长大后，<br>才发现，<br>身边到处是皇帝，<br>人人都想做和珅，<br>却没有找到一个纪晓岚。</p>\n<p>初心易有，<br>却难持久。</p>\n","categories":[],"tags":["随笔"]},{"title":"格局逆袭","url":"https://iamting93.github.io/2018/01/08/reading/格局逆袭/","content":"<p>##格局一书的一点启示</p>\n<a id=\"more\"></a>\n<p>我觉得大熊老师的这本书写得很好，也很庆幸我读了这本书</p>\n<p>刚大学毕业的这段时间，我自视甚高，觉得堂堂一个毕业于中山大学的学生，一定要干一点什么大事出来，<br>一定要创业，干出自己的一番天地。但是随着时间的流逝，我发现，事事都不如我所想，做到的和自己的预期出入很大，<br>一时之间，有种怀才不遇之感，埋怨，挫败，迷茫随之而来。正如书中所说，对于那些不重视我的人，我都看不起，<br>总认为，有一天会后悔的。</p>\n<p>这段时间真的很躁动，特别是看到某某同学，某某朋友，甚至资质不如我的人，活得比我好，比我出色，就特别质疑，特别烦躁，<br>但更多的是失落，感概人生真难啊。</p>\n<p>但是直到看到了这本书，我觉得这书说到我的心坎，道出了我的心里最脆弱的那一面。</p>\n<p>我根本对自己一点都不了解，但是却想着如何成功。</p>\n<p>但正如书中所说，只有一个人认识了自己，才能认识不足，改变自己的思想，从而改变自己的行为。而那些神经病的，就是天天重复着昨天的行为，却想获得不一样的结果，这是可悲的地方。</p>\n<p>说白了，我现在就是一个有才华的穷人，整天纠结着怎么赚很多钱，怎么更快地功名成就，活得比别人更好。但是说句实话，这活得很烦躁，很纠结，很累。每每在彷徨，在感叹，我要怎么做，别人都比我更好了。</p>\n<p>但是书中说，30岁之后，才是一个人真正立业的机会，在此之前，需要做的是，提升自己的价值。<br>虽然有点中庸，但是细想一下，倒是有它的道理。</p>\n<p>人的本质是价值，当有价值，并能帮助别人创造价值，自然财源滚滚了。说到底，金钱不过是附加值，关键的价值。<br>所以啊，我想，与其整天纠结怎样赚得更多，我倒不如在30岁前，努力提升自己的价值。</p>\n<p>按照目前来看，别人觉得我的价值就是我的基本工资，所以怎么才能增加我的价值？对，学习，而且要学很多很多各种各样的知识，并且创造相应的价值。<br>为了这样做，就应该有所改变，抛弃以前的坏习惯。</p>\n<p>首先遇到的问题是，坚持。我深知自己的意志力并不是如此可靠，但是啊，我要改变，对，慢慢地改变，当成习惯，就好了。要克服怠惰之心，而不是冒着“啊，今天就先这样”的想法。既然有一颗不甘平寂的心，那就多想想自己的未来，或许就有动力了。</p>\n<p>还有，就是多接触新鲜的事物，多去做之前不敢，不太想去做的事。内向腼腆是一种自我封闭，自我保护的行为，有时候是好事，但更多的时候，于事无补。</p>\n<p>我觉得我这个人有时候想得太多，太过计较得失，怎样才能让自己不吃亏。如书中所述，与其想那么多，计较那么多，倒不如直接吃点小亏，一来不用想太多，二来没有不用付出的获得，任何行为都是有它相应的代价，从来贪小便宜的很少能成大事。只要有意义，这钱花了就值得，钱是赚不完的，花了再赚回来就是了。这钱花了也是为了提升个人价值。为如何省这小钱而花费太多的时间和精力，不值得。</p>\n<p>总之，现在焦急都是无用的，倒不如静下心来，好好地把自己当前要做的东西做好，把个人的价值提升上去，就会知道下一步要怎么做了。</p>\n<p>感谢这本书，感谢大熊老师，抚慰了躁动的心，让其静下心来，想想自己未来的路要怎么走，怎么改变，完成一次人生的逆袭。</p>\n<p>感悟尚有很多，而且也有很多需要感悟，当重新再拜读的时候，有新的认识一定会记下来。</p>\n<p>TO BE BETTER ONE.</p>\n","categories":[],"tags":[]},{"title":"旅行的意义","url":"https://iamting93.github.io/2018/01/01/essay/旅行的意义/","content":"<p>愿在旅途上有相随的人<br>一起分享所见所闻所感<br>一起体会自然的美丽<br><a id=\"more\"></a></p>\n<p>这次的华东旅游，虽然真的很累，但是感觉很有意义，<br>领略了很多美好之物。<br>特别喜欢苏州的虎丘，真的很自然，<br>风格很符合我的胃口。<br><img src=\"/img/essay/IMG_20171229_145933.jpg\" alt=\"想装作很有意境\" title=\"落寞的样子\"></p>\n<p>若果以后真的有机会设计自己的园林，那一定要以虎丘为原型。</p>\n<p>这次真的很感谢母亲能够每天跟我走几万步，<br>虽然这次旅行的意义就是和母亲一起旅游，<br>但是这是一趟很累很辛苦的旅行。<br><img src=\"/img/essay/IMG_20171229_133538.jpg\" alt=\"这张真的很美好\" title=\"美好之物\"></p>\n<p>父母在，不远游<br>那么，我把父母都带上好了。</p>\n<p>记住这次旅游的感觉，<br>这次旅游的意义。<br>因为这样的机会不多。<br>这是2017年里我做得最好的事情了。</p>\n<p>一趟旅程的结束，<br>不过是另一趟旅程的开始。<br>愿不放弃前进的脚步，<br>看尽世上的美好之物。</p>\n","categories":[],"tags":["随笔"]},{"title":"Along with you","url":"https://iamting93.github.io/2017/12/10/essay/along with you/","content":"<p>迈出你的脚步吧<br><a id=\"more\"></a><br><img src=\"/img/essay/along_with_you.jpg\" alt=\"Along with you\" title=\"Yes, I will be with you\"></p>\n<p>我的朋友<br>不要因为未知而恐惧</p>\n<p>相信<br>我就是你的眼<br>我会一直在你的身边<br>与你同在</p>\n","categories":[],"tags":["随笔"]},{"title":"冷的感觉","url":"https://iamting93.github.io/2017/12/08/essay/冷的感觉/","content":"<p>是夜，未见星光<br><a id=\"more\"></a></p>\n<p>心里，</p>\n<p>一阵的恶冷，</p>\n<p>是落寞，</p>\n<p>是迷茫，</p>\n<p>啊，</p>\n<p>有时真的，</p>\n<p>觉得到此为止就好了。</p>\n<p>起码，</p>\n<p>我曾见过四季的风景。</p>\n<p>真的，</p>\n<p>觉得有点累，</p>\n<p>永远都在追逐，</p>\n<p>然而那是指尖不曾，</p>\n<p>触及的距离啊。</p>\n<p>在这无尽的路上，</p>\n<p>我还能前行多远？</p>\n<p>我还能欺骗自己多久？</p>\n","categories":[],"tags":["随笔"]},{"title":"茫","url":"https://iamting93.github.io/2017/12/03/essay/茫/","content":"<p>等不到的永远在骚动，被偏爱的有恃无恐<br><a id=\"more\"></a><br>内心深感不安</p>\n<p>未知是最让人惶恐</p>\n<p>我的未来到底会怎么样？</p>\n<p>对比或者是最大的错误</p>\n<p>迷茫</p>\n<p>为什么我总是在角落里</p>\n<p>观望着别人多彩的人生</p>\n<p>没有人能够理解</p>\n<p>或许这就是孤独</p>\n<p>内心的躁动不安</p>\n<p>年华在麻木中流逝</p>\n<p>谁，</p>\n<p>能指引我的方向？</p>\n","categories":[],"tags":["随笔"]},{"title":"20171127","url":"https://iamting93.github.io/2017/11/27/diary/20171127/","content":"<p>##2017-11-27日记</p>\n<a id=\"more\"></a>\n<p>时间飞逝呢，距离上一次日记已是八个月之前了。</p>\n<p>之所以现在重新管理博客，只是忽然觉得不能继续这样沉沦下去而已，不甘心的心啊。</p>\n<p>这几个月以来发生的事蛮多的，但是现在却回想不起来，可能因为有点麻木吧，我害怕这样，死于安乐。</p>\n<p>还是得坚持自己的意志，虽然现在孤独随影，但是我的心还是在渴望着，渴望着成功的一天，所以，不忘初心吧。</p>\n<p>我应该要走出这个小小的空间，去看看外面的千姿百态。</p>\n<p>现在纵使不如意，但是还是相信那一天的到来，所以现在还是要坚持吧。</p>\n<p>TO BE BETTER ONE.</p>\n","categories":["日记"],"tags":[]},{"title":"Sunday算法","url":"https://iamting93.github.io/2017/11/23/algorithm/Sunday/Sunday算法/","content":"<p>&ensp;之前刷字符串匹配的题目，都是用最简单暴力的 – 一个个字符匹配，效率可想而知。</p>\n<a id=\"more\"></a>\n<p>&ensp;当然网上是有一大堆的字符串匹配算法，如经典的KMP算法，但对于我这种没耐性又笨的人来说，KMP实在难以理解，又难实现。所以一直在寻找一个简单又易懂的替代算法，于是就有了这篇博文。</p>\n<p>&ensp;Sunday算法的历史什么的就不过多叙述了，也不与其它算法做太多比较，毕竟嘿嘿。不过这个算法能称得上简单高效还是有它的道理。</p>\n<p>&ensp;字符串匹配的核心思想是<strong>做尽量少的比较来提高匹配速度</strong>。</p>\n<p>&ensp;Sunday算法的算法如下：有长为sLen源字符串s，以及长为tLen的需匹配的字符串t。</p>\n<ol>\n<li>从源字符串s的第i位开始，自左往右匹配字符串；</li>\n<li>当匹配到不同的字符时，查找s的第i + tLen位字符ch在匹配字符串t中的位置，查找方式为自右往左遍历，到遇到第一个ch为止。假设此时找到ch时，其位置与t最右边的字符距离为dis;</li>\n<li>从源字符串s的第i + dis + 1开始，重复1的操作，直到s的第sLen - tLen位。</li>\n</ol>\n<p>&ensp;这里需要注意的地方时，若ch在t中不存在，那么此时dis = tLen，即从源字符串s的第i + tLen + 1开始匹配, 因为i + 1到i + tLen之间的子字符串肯定不匹配，所以直接从i + tLen + 1开始。另外，若果在s中匹配到t字符串，i要往右位移tLen位，然后接着1的操作。</p>\n<p>&ensp;以下给出例子：</p>\n<p>&ensp;s = “YJABCDEBFK”, sLen = 10</p>\n<p>&ensp;t = “BC”, tLen = 2</p>\n<p><img src=\"/img/algorithm/sunday/pic1.png\" alt=\"pic1\" title=\"pic1\"></p>\n<p>如上图片所示，一开始从i = 0开始匹配字符，此时s[0] = Y, t[0] = B，两者不匹配，查找s中下标为i + tLen = 2的字符s[2] = A,从右往左查找A在t中第一次出现的下标，但是A并不存在于t中，所以i要右移到下标位i + tLen + 1 = 3处;</p>\n<p><img src=\"/img/algorithm/sunday/pic3.png\" alt=\"pic2\" title=\"pic2\"></p>\n<p>图2所示，i = 3,此时按照算法是会在s匹配到一个BC，匹配后，i需要往右位移tLen = 2位。</p>\n<p><img src=\"/img/algorithm/sunday/pic4.png\" alt=\"pic3\" title=\"pic3\"></p>\n<p>图3所示，i = 5,此时s[5] = D, t[0] = B，两者不匹配,查找s中下标为i + tLen = 7的字符s[7] = B,从右往左查找B在t中第一次出现的下标，为0，此时其位置与t最右边的字符距离为dis = 1，所以i需要往右dis + 1 = 2位，即移动到s[7]的位置。</p>\n<p><img src=\"/img/algorithm/sunday/pic5.png\" alt=\"pic4\" title=\"pic4\"></p>\n<p>图4所示，循环遍历s,直到s的第sLen - tLen位，算法结束。</p>\n<p>以下给出c++的算法实现。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sunday</span><span class=\"params\">(<span class=\"keyword\">char</span>* s, <span class=\"keyword\">int</span> sLen, <span class=\"keyword\">char</span>* t, <span class=\"keyword\">int</span> tLen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> next[<span class=\"number\">26</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) next[i] = tLen + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 优化，预先计算匹配字符串中每个字符到最右的距离并加1，可以手动模拟计算验证</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tLen; i++) next[t[i] - <span class=\"string\">'a'</span>] = tLen - i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> ptr = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= sLen - tLen; ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (s[i + ptr] == t[ptr]) &#123;</span><br><span class=\"line\">\t\t\tptr++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ptr == tLen) &#123;</span><br><span class=\"line\">\t\t\t\tcounter++;</span><br><span class=\"line\">\t\t\t\tptr = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\ti += tLen;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i + tLen &lt; sLen) &#123; <span class=\"comment\">// 这里的判断条件不能够漏掉，不然可能数组越界</span></span><br><span class=\"line\">\t\t\ti += next[s[i + tLen] - <span class=\"string\">'a'</span>];</span><br><span class=\"line\">\t\t\tptr = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度o(n)</p>\n<hr>\n<p>文中有疏漏欢迎指出。</p>\n","categories":[],"tags":["algorithm"]},{"title":"20170316","url":"https://iamting93.github.io/2017/03/16/diary/20170316/","content":"<p>##2017-03-16日记</p>\n<a id=\"more\"></a>\n<p>今天终于入职啦，虽然现在公司的状况不太好，但是实力还是很雄厚的。<br>福利以及人文关怀还是杠杠的，大神很多，估计能够学到的东西会很多。<br>额，兴趣相同的人也是挺多的。</p>\n<hr>\n<p>感觉现在在读书以及敲代码方面的功夫减弱了，在强者扎堆的地方，危机感还是有待加强。<br>有空要把基础补回来，并且拓宽视野。</p>\n<p>TO BE BETTER ONE.</p>\n","categories":["日记"],"tags":[]},{"title":"20170310","url":"https://iamting93.github.io/2017/03/10/diary/20170310/","content":"<p>##2017-03-10日记</p>\n<a id=\"more\"></a>\n<p>虽然要记录的不多，但还是写下自己今天做的事情。</p>\n<p>今天开始把时间放在Android的学习上，虽然学习的时间不长，而且容易分神，但是万事开头难，相信自己加把劲还是能够取得进一步的成长。</p>\n<p>现在按照官方的教程一遍看一遍敲代码，感觉还是有点小收获，不过容易忘记，可能还需要进一步的做笔记吧。<br>就这样，继续努力。</p>\n<p>TO BE BETTER ONE.</p>\n","categories":["日记"],"tags":[]},{"title":"第一篇博客","url":"https://iamting93.github.io/2017/03/06/第一篇博客/","content":"<a id=\"more\"></a>\n<p>Ting的博客的第一篇文章。<br>其实也是没有什么特别的东西。<br>要是说的话，那就是To Be Better One~~</p>\n","categories":["随笔"],"tags":[]},{"title":"about","url":"https://iamting93.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://iamting93.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://iamting93.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://iamting93.github.io/tag/index.html","content":"","categories":[],"tags":[]}]